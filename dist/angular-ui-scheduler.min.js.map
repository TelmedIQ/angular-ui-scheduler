{"version":3,"sources":["app.js","angularUiSchedulerCtrl.js","angularUiSchedulerDirective.js","filters/schZeroPadFilter.js","services/rRuleHelper.js"],"names":["angular","module","constant","controller","$scope","$filter","$log","rRuleHelper","angular_ui_scheduler_useTimezone","angular_ui_scheduler_frequencyOptions","angular_ui_scheduler_endOptions","angular_ui_scheduler_occurrences","angular_ui_scheduler_weekdays","angular_ui_scheduler_months","schedulerShowTimeZone","frequencyOptions","endOptions","occurrences","weekdays","months","schedulerStartHour","value","arguments","length","uiState","schedulerStartDt","moment","hours","toDate","getHours","schedulerStartMinute","minutes","getMinutes","schedulerStartSecond","seconds","getSeconds","setWeekday","day","i","weekDays","indexOf","splice","push","getRRule","getRule","getValue","options","getOptions","rrule","toString","setRRule","rule","clear","setRule","setStartDate","startDate","Date","schedulerFrequency","schedulerEnd","schedulerInterval","schedulerOccurrenceCount","monthlyRepeatOption","monthDay","monthlyOccurrence","monthlyWeekDay","yearlyRepeatOption","yearlyMonth","yearlyWeekDay","yearlyOtherMonth","yearlyOccurrence","timeZones","tz","names","$watch","state","newVal","schedulerShowInterval","schedulerIntervalLabel","intervalLabel","name","directive","restrict","require","templateUrl","scope","hideStart","link","iElement","iAttrs","ngModelCtrl","$formatters","modelValue","debug","copy","$parsers","viewValue","newRule","$setViewValue","required","$validators","filter","n","pad","str","Math","pow","replace","trim","substr","factory","frequency","interval","occurrenceCount","endDate","schedulerEndDt","month","setOccurrence","params","this","isDate","dtstart","e","error","message","freq","RRule","toUpperCase","byweekday","isArray","undefined","bysetpos","bymonth","bymonthday","count","until","DAILY","set","key","pair","_","find","x","k","split","toWeekDays","days","darray","toLowerCase","match","warray","diffA","difference","diffB","normalizeDate","test","p1","p2","p3","p4","p5","p6","setValue","token","tokens","l","opt","parseInt","j","contains","monhthlyRepeatOption","tmpDate","isValid","yearlRepeatOption","yearlyOption","warn","validate","forEach"],"mappings":"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","file":"angular-ui-scheduler.min.js","sourcesContent":["angular.module('angular-ui-scheduler', [])\n    .constant('angular_ui_scheduler_hideStart', true)\n    .constant('angular_ui_scheduler_useTimezone', false);","/**\n * @ngdoc controller\n * @name angular-ui-scheduler:angularUiSchedulerCtrl\n *\n * @description\n *\n *\n * @requires $scope\n * */\nangular.module('angular-ui-scheduler')\n    .controller('angularUiSchedulerCtrl', [\"$scope\", \"$filter\", \"$log\", \"rRuleHelper\", \"angular_ui_scheduler_useTimezone\", \"angular_ui_scheduler_frequencyOptions\", \"angular_ui_scheduler_endOptions\", \"angular_ui_scheduler_occurrences\", \"angular_ui_scheduler_weekdays\", \"angular_ui_scheduler_months\", function ($scope, $filter, $log, rRuleHelper,\n                                                    angular_ui_scheduler_useTimezone,\n                                                    angular_ui_scheduler_frequencyOptions,\n                                                    angular_ui_scheduler_endOptions,\n                                                    angular_ui_scheduler_occurrences,\n                                                    angular_ui_scheduler_weekdays,\n                                                    angular_ui_scheduler_months) {\n\n        //region lookup fields\n\n        $scope.schedulerShowTimeZone = angular_ui_scheduler_useTimezone;\n\n        $scope.frequencyOptions = angular_ui_scheduler_frequencyOptions;\n\n        $scope.endOptions = angular_ui_scheduler_endOptions;\n\n        $scope.occurrences = angular_ui_scheduler_occurrences;\n\n        $scope.weekdays = angular_ui_scheduler_weekdays;\n\n        $scope.months = angular_ui_scheduler_months;\n\n        //endregion\n\n        //region this should be moved to time edit directive\n        $scope.schedulerStartHour = function (value) {\n            if (arguments.length) {\n                $scope.uiState.schedulerStartDt = moment($scope.uiState.schedulerStartDt).hours(value).toDate();\n            } else {\n                return $scope.uiState.schedulerStartDt.getHours();\n            }\n        };\n        $scope.schedulerStartMinute = function (value) {\n            if (arguments.length) {\n                $scope.uiState.schedulerStartDt = moment($scope.uiState.schedulerStartDt).minutes(value).toDate();\n            } else {\n                return $scope.uiState.schedulerStartDt.getMinutes();\n            }\n        };\n        $scope.schedulerStartSecond = function (value) {\n            if (arguments.length) {\n                $scope.uiState.schedulerStartDt = moment($scope.uiState.schedulerStartDt).seconds(value).toDate();\n            } else {\n                return $scope.uiState.schedulerStartDt.getSeconds();\n            }\n        };\n        //endregion\n\n        $scope.setWeekday = function (day) {\n            // Add or remove day when user clicks checkbox button\n            var i = $scope.uiState.weekDays.indexOf(day);\n            if (i >= 0) {\n                $scope.uiState.weekDays.splice(i, 1);\n            }\n            else {\n                $scope.uiState.weekDays.push(day);\n            }\n        };\n\n        // Set values for detail page\n        //$scope.setDetails = function () {\n        //    //Detail view\n        //    $scope.schedulerIsValid = false;\n        //    $scope.rrule_nlp_description = '';\n        //    $scope.rrule = '';\n        //    $scope.dateChoice = 'utc';\n        //    $scope.occurrence_list = [];\n        //\n        //    //var rrule = this.getRRule(),\n        //    //    scope = this.scope;\n        //    //if (rrule) {\n        //    //    scope.rrule_nlp_description = rrule.toText();\n        //    //    scope.dateChoice = 'local';\n        //    //    scope.occurrence_list = [];\n        //    //    rrule.all(function (date, i) {\n        //    //        var local, dt;\n        //    //        if (i < 10) {\n        //    //            if (angular_ui_scheduler_useTimezone) {\n        //    //                dt = $timezones.align(date, scope.schedulerTimeZone);\n        //    //                local = $filter('schZeroPad')(dt.getMonth() + 1, 2) + '/' +\n        //    //                    $filter('schZeroPad')(dt.getDate(), 2) + '/' + dt.getFullYear() + ' ' +\n        //    //                    $filter('schZeroPad')(dt.getHours(), 2) + ':' +\n        //    //                    $filter('schZeroPad')(dt.getMinutes(), 2) + ':' +\n        //    //                    $filter('schZeroPad')(dt.getSeconds(), 2) + ' ' +\n        //    //                    dt.getTimezoneAbbreviation();\n        //    //            }\n        //    //            else {\n        //    //                local = $filter('date')(date, 'MM/dd/yyyy HH:mm:ss Z');\n        //    //            }\n        //    //            scope.occurrence_list.push({utc: $filter('schDateStrFix')(date.toISOString()), local: local});\n        //    //            return true;\n        //    //        }\n        //    //        return false;\n        //    //    });\n        //    //    scope.rrule_nlp_description = rrule.toText().replace(/^RRule error.*$/, 'Natural language description not available');\n        //    //    scope.rrule = rrule.toString();\n        //    //}\n        //};\n\n        // Returns an rrule object\n        $scope.getRRule = function () {\n            return rRuleHelper.getRule($scope.uiState);\n        };\n\n        // Return object containing schedule name, string representation of rrule per iCalendar RFC and options used to create rrule\n        $scope.getValue = function () {\n            var rule = $scope.getRRule(),\n                options = rRuleHelper.getOptions($scope.uiState);\n            return {\n                rrule: $scope.getRRule().toString(),\n                options: options\n            };\n        };\n\n        $scope.setRRule = function (rule) {\n            $scope.clear();\n            rRuleHelper.setRule(rule, $scope.uiState);\n        };\n\n        $scope.setStartDate = function (startDate) {\n            $scope.uiState.schedulerStartDt = startDate;\n        };\n\n        // Clear the form, returning all elements to a default state\n        $scope.clear = function () {\n            $scope.uiState = {\n                weekDays: [],\n                schedulerStartDt: new Date(),\n                schedulerFrequency: $scope.frequencyOptions[0],\n                schedulerEnd: $scope.endOptions[0],\n                schedulerInterval: 1,\n                schedulerOccurrenceCount: 1,\n                monthlyRepeatOption: 'day',\n                monthDay: 1,\n                monthlyOccurrence: $scope.occurrences[0],\n                monthlyWeekDay: $scope.weekdays[0],\n                yearlyRepeatOption: 'month',\n                yearlyMonth: $scope.months[0],\n                yearlyWeekDay: $scope.weekdays[0],\n                yearlyOtherMonth: $scope.months[0],\n                yearlyOccurrence: $scope.occurrences[0]\n                //schedulerEndDt: undefined\n            };\n\n            if (angular_ui_scheduler_useTimezone) {\n                $scope.timeZones = moment.tz.names();\n            }\n        };\n\n        $scope.clear();\n\n        //update role\n        $scope.$watch('uiState', function (state) {\n            $scope.rule = $scope.getValue();\n        }, true);\n\n        $scope.$watch('uiState.schedulerFrequency', function (newVal) {\n            if (newVal && newVal.value !== '' && newVal.value !== 'none') {\n                $scope.uiState.schedulerInterval = 1;\n                $scope.schedulerShowInterval = true;\n                $scope.schedulerIntervalLabel = $scope.uiState.schedulerFrequency.intervalLabel;\n            }\n            else {\n                $scope.schedulerShowInterval = false;\n                $scope.uiState.schedulerEnd = $scope.endOptions[0];\n            }\n        });\n\n        $scope.$watch('uiState.schedulerEnd', function () {\n            $scope.uiState.schedulerOccurrenceCount = 1;\n        });\n    }]);\n","/**\n * @ngdoc directive\n * @name angular-ui-scheduler:angularUiScheduler\n *\n * @description\n *\n *\n * @restrict E\n * */\nangular.module('angular-ui-scheduler')\n    .constant('angular_ui_scheduler_frequencyOptions', [\n        {name: 'None (run once)', value: 'none', intervalLabel: ''},\n        {name: 'Minute', value: 'minutely', intervalLabel: 'minute(s)'},\n        {name: 'Hour', value: 'hourly', intervalLabel: 'hour(s)'},\n        {name: 'Day', value: 'daily', intervalLabel: 'day(s)'},\n        {name: 'Week', value: 'weekly', intervalLabel: 'week(s)'},\n        {name: 'Month', value: 'monthly', intervalLabel: 'month(s)'},\n        {name: 'Year', value: 'yearly', intervalLabel: 'year(s)'}\n    ])\n    .constant('angular_ui_scheduler_endOptions', [\n        {name: 'Never', value: 'never'},\n        {name: 'After', value: 'after'},\n        {name: 'On Date', value: 'on'}\n    ])\n    .constant('angular_ui_scheduler_occurrences', [\n        {name: 'first', value: 1},\n        {name: 'second', value: 2},\n        {name: 'third', value: 3},\n        {name: 'fourth', value: 4},\n        {name: 'last', value: -1}\n    ])\n    .constant('angular_ui_scheduler_weekdays', [\n        {name: 'Sunday', value: 'su'},\n        {name: 'Monday', value: 'mo'},\n        {name: 'Tuesday', value: 'tu'},\n        {name: 'Wednesday', value: 'we'},\n        {name: 'Thursday', value: 'th'},\n        {name: 'Friday', value: 'fr'},\n        {name: 'Saturday', value: 'sa'},\n        {name: 'Day', value: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']},\n        {name: 'Weekday', value: ['mo', 'tu', 'we', 'th', 'fr']},\n        {name: 'Weekend day', value: ['sa', 'su']}\n    ])\n    .constant('angular_ui_scheduler_months', [\n        {name: 'January', value: 1},\n        {name: 'February', value: 2},\n        {name: 'March', value: 3},\n        {name: 'April', value: 4},\n        {name: 'May', value: 5},\n        {name: 'June', value: 6},\n        {name: 'July', value: 7},\n        {name: 'August', value: 8},\n        {name: 'September', value: 9},\n        {name: 'October', value: 10},\n        {name: 'November', value: 11},\n        {name: 'December', value: 12}\n    ])\n    .directive('angularUiScheduler', [\"$log\", function ($log) {\n        return {\n            restrict: 'E',\n            require: 'ngModel',\n            templateUrl: 'angular-ui-scheduler/src/angularUiScheduler.html',\n            scope: {\n                rrule: '@',\n                hideStart: '=',\n                startDate: '='\n            },\n            controller: 'angularUiSchedulerCtrl',\n            link: function (scope, iElement, iAttrs, ngModelCtrl) {\n\n                //region handle ngModelCtrl\n                ngModelCtrl.$formatters.push(function (modelValue) {\n                    $log.debug('angularUiSchedulerCtrl $formatters', modelValue);\n                    return angular.copy(modelValue);\n                });\n\n                ngModelCtrl.$parsers.push(function (viewValue) {\n                    $log.debug('angularUiSchedulerCtrl $parsers', viewValue);\n                    return angular.copy(viewValue);\n                });\n\n                scope.$watch('rule', function (newRule) {\n                    $log.debug('angularUiSchedulerCtrl updates ngModel binding', newRule);\n                    ngModelCtrl.$setViewValue(angular.copy(newRule));\n                }, true);\n\n                //ngModelCtrl.$render = function () {\n                //    scope.role = ngModelCtrl.$viewValue;\n                //};\n\n                if (iAttrs.required) {\n                    ngModelCtrl.$validators.required = function (modelValue, viewValue) {\n                        return modelValue;\n                    };\n                }\n                //endregion\n\n                scope.$watch('rrule', function (newVal) {\n                    if (newVal) {\n                        $log.debug('setting rrule', newVal);\n                        scope.setRRule(newVal);\n                        if (scope.startDate) {\n                            scope.setStartDate(scope.startDate);\n                        }\n                    }\n                });\n\n                scope.$watch('startDate', function (newVal) {\n                    if (newVal && !scope.rrule) {\n                        $log.debug('setting startDate', newVal);\n                        scope.setStartDate(scope.startDate);\n                    }\n                });\n            }\n        };\n    }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schZeroPadFilter\n *\n * @description\n * $filter('schZeroPad')(n, pad) -- or -- {{ n | afZeroPad:pad }}\n *\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schZeroPad', function () {\n        return function (n, pad) {\n            var str = (Math.pow(10, pad) + '').replace(/^1/, '') + (n + '').trim();\n            return str.substr(str.length - pad);\n        };\n    });","/**\n * @ngdoc service\n * @name angular-ui-scheduler:rRuleHelper\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('rRuleHelper', [\"angular_ui_scheduler_useTimezone\", \"$log\", \"$filter\", \"angular_ui_scheduler_frequencyOptions\", \"angular_ui_scheduler_occurrences\", \"angular_ui_scheduler_endOptions\", \"angular_ui_scheduler_weekdays\", \"angular_ui_scheduler_months\", function (angular_ui_scheduler_useTimezone, $log, $filter,\n                                      angular_ui_scheduler_frequencyOptions,\n                                      angular_ui_scheduler_occurrences,\n                                      angular_ui_scheduler_endOptions,\n                                      angular_ui_scheduler_weekdays,\n                                      angular_ui_scheduler_months) {\n        return {\n\n            // Evaluate user intput and build options for passing to rrule\n            getOptions: function (scope) {\n                var options = {};\n                options.startDate = scope.schedulerStartDt;\n                options.frequency = scope.schedulerFrequency.value;\n                options.interval = scope.schedulerInterval;\n                if (scope.schedulerEnd.value === 'after') {\n                    options.occurrenceCount = scope.schedulerOccurrenceCount;\n                }\n                if (scope.schedulerEnd.value === 'on') {\n                    options.endDate = scope.schedulerEndDt;\n                }\n                if (scope.schedulerFrequency.value === 'weekly') {\n                    options.weekDays = scope.weekDays;\n                }\n                else if (scope.schedulerFrequency.value === 'yearly') {\n                    if (scope.yearlyRepeatOption === 'month') {\n                        options.month = scope.yearlyMonth.value;\n                        options.monthDay = scope.monthDay;\n                    }\n                    else {\n                        options.setOccurrence = scope.yearlyOccurrence.value;\n                        options.weekDays = scope.yearlyWeekDay.value;\n                        options.month = scope.yearlyOtherMonth.value;\n                    }\n                }\n                else if (scope.schedulerFrequency.value === 'monthly') {\n                    if (scope.monthlyRepeatOption === 'day') {\n                        options.monthDay = scope.monthDay;\n                    }\n                    else {\n                        options.setOccurrence = scope.monthlyOccurrence.value;\n                        options.weekDays = scope.monthlyWeekDay.value;\n                    }\n                }\n                return options;\n            },\n\n            //returns rrule based on current state of UI\n            getRule: function (scope) {\n\n                var params = this.getOptions(scope);\n\n                // Convert user inputs to an rrule. Returns rrule object using https://github.com/jkbr/rrule\n                // **list of 'valid values' found below in LoadLookupValues\n\n                var startDate = params.startDate,  // date object or string in yyyy-MM-ddTHH:mm:ss.sssZ format\n                    frequency = params.frequency,  // string, optional, valid value from frequencyOptions\n                    interval = params.interval,    // integer, optional\n                    occurrenceCount = params.occurrenceCount,  //integer, optional\n                    endDate = params.endDate,      // date object or string in yyyy-MM-dd format, optional\n                                                   // ignored if occurrenceCount provided\n                    month = params.month,          // integer, optional, valid value from months\n                    monthDay = params.monthDay,    // integer, optional, between 1 and 31\n                    weekDays = params.weekDays,     // integer, optional, valid value from weekdays\n                    setOccurrence = params.setOccurrence, // integer, optional, valid value from occurrences\n                    options = {}, i;\n\n                if (angular.isDate(startDate)) {\n                    options.dtstart = startDate;\n                }\n                else {\n                    try {\n                        options.dtstart = new Date(startDate);\n                    }\n                    catch (e) {\n                        $log.error('Date conversion failed. Attempted to convert ' + startDate + ' to Date. ' + e.message);\n                    }\n                }\n\n                if (frequency && frequency !== 'none') {\n                    options.freq = RRule[frequency.toUpperCase()];\n                    options.interval = interval;\n\n                    if (weekDays && typeof weekDays === 'string') {\n                        options.byweekday = RRule[weekDays.toUpperCase()];\n                    }\n\n                    if (weekDays && angular.isArray(weekDays)) {\n                        options.byweekday = [];\n                        for (i = 0; i < weekDays.length; i++) {\n                            options.byweekday.push(RRule[weekDays[i].toUpperCase()]);\n                        }\n                    }\n\n                    if (setOccurrence !== undefined && setOccurrence !== null) {\n                        options.bysetpos = setOccurrence;\n                    }\n\n                    if (month) {\n                        options.bymonth = month;\n                    }\n\n                    if (monthDay) {\n                        options.bymonthday = monthDay;\n                    }\n\n                    if (occurrenceCount) {\n                        options.count = occurrenceCount;\n                    }\n                    else if (endDate) {\n                        if (angular.isDate(endDate)) {\n                            options.until = endDate;\n                        }\n                        else {\n                            try {\n                                options.until = new Date(endDate);\n                            }\n                            catch (e) {\n                                $log.error('Date conversion failed. Attempted to convert ' + endDate + ' to Date. ' + e.message);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // We only want to run 1x\n                    options.freq = RRule.DAILY;\n                    options.interval = 1;\n                    options.count = 1;\n                }\n                return new RRule(options);\n            },\n\n            //configures UI based on rrule\n            setRule: function (rule, params) {\n\n                // Search the tokens of RRule keys for a particular key, returning its value\n                function getValue(set, key) {\n                    var pair = _.find(set, function (x) {\n                        var k = x.split(/=/)[0].toUpperCase();\n                        return (k === key);\n                    });\n                    if (pair) {\n                        return pair.split(/=/)[1].toUpperCase();\n                    }\n                    return null;\n                }\n\n                function toWeekDays(days) {\n                    var darray = days.toLowerCase().split(/,/),\n                        match = _.find(angular_ui_scheduler_weekdays, function (x) {\n                            var warray = (angular.isArray(x.value)) ? x.value : [x.value],\n                                diffA = _.difference(warray, darray),\n                                diffB = _.difference(darray, warray);\n                            return (diffA.length === 0 && diffB.length === 0);\n                        });\n                    return match;\n                }\n\n                function normalizeDate(value) {\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    return value;\n                }\n\n                function setValue(token, tokens) {\n\n                    var key = token[0].toUpperCase(),\n                        value = token[1];\n\n                    switch (key) {\n                        case 'FREQ':\n                            var l = value.toLowerCase();\n                            params.schedulerFrequency = _.find(angular_ui_scheduler_frequencyOptions, function (opt) {\n                                params.schedulerIntervalLabel = opt.intervalLabel;\n                                return opt.value === l;\n                            });\n                            if (!params.schedulerFrequency || !params.schedulerFrequency.name) {\n                                throw 'FREQ not found in list of valid options';\n                            }\n                            break;\n\n                        case 'INTERVAL' :\n                            if (parseInt(value, 10)) {\n                                params.schedulerInterval = parseInt(value, 10);\n                                params.schedulerShowInterval = true;\n                            }\n                            else {\n                                throw 'INTERVAL must contain an integer > 0';\n                            }\n                            break;\n\n                        case 'BYDAY':\n                            if (getValue(tokens, 'FREQ') === 'WEEKLY') {\n                                var days = value.split(/,/);\n                                params.weekDays = [];\n                                for (var j = 0; j < days.length; j++) {\n                                    if (_.contains(['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'], days[j])) {\n                                        params.weekDays.push(days[j].toLowerCase());\n                                    }\n                                    else {\n                                        throw 'BYDAY contains unrecognized day value(s)';\n                                    }\n                                }\n                            }\n                            else if (getValue(tokens, 'FREQ') === 'MONTHLY') {\n                                params.monthlyRepeatOption = 'other';\n                                params.monthlyWeekDay = toWeekDays(value);\n                                if (!params.monthlyWeekDay) {\n                                    throw 'BYDAY contains unrecognized day value(s)';\n                                }\n                            }\n                            else {\n                                params.yearlyRepeatOption = 'other';\n                                params.yearlyWeekDay = toWeekDays(value);\n                                if (!params.yearlyWeekDay) {\n                                    throw 'BYDAY contains unrecognized day value(s)';\n                                }\n                            }\n                            break;\n\n                        case 'BYMONTHDAY':\n                            if (parseInt(value, 10) && parseInt(value, 10) > 0 && parseInt(value, 10) < 32) {\n                                params.monthDay = parseInt(value, 10);\n                                params.monhthlyRepeatOption = 'day';\n                            }\n                            else {\n                                throw 'BYMONTHDAY must contain an integer between 1 and 31';\n                            }\n                            break;\n\n                        case 'DTSTART':\n                            // The form has been reset to the local zone\n                            value = normalizeDate(value);\n                            var tmpDate = moment(value);\n                            if (!tmpDate.isValid()) {\n                                throw 'Invalid DTSTART: ' + value;\n                            }\n                            params.schedulerStartDt = tmpDate.toDate();\n                            break;\n\n                        case 'BYSETPOS':\n                            if (getValue(tokens, 'FREQ') === 'YEARLY') {\n                                params.yearlRepeatOption = 'other';\n                                params.yearlyOccurrence = _.find(angular_ui_scheduler_occurrences, function (x) {\n                                    return (x.value === parseInt(value, 10));\n                                });\n                                if (!params.yearlyOccurrence || !params.yearlyOccurrence.name) {\n                                    throw 'BYSETPOS was not in the tokens of 1,2,3,4,-1';\n                                }\n                            }\n                            else {\n                                params.monthlyOccurrence = _.find(angular_ui_scheduler_occurrences, function (x) {\n                                    return (x.value === parseInt(value, 10));\n                                });\n                                if (!params.monthlyOccurrence || !params.monthlyOccurrence.name) {\n                                    throw 'BYSETPOS was not in the tokens of 1,2,3,4,-1';\n                                }\n                            }\n                            break;\n\n                        case 'COUNT':\n                            if (parseInt(value, 10)) {\n                                params.schedulerEnd = angular_ui_scheduler_endOptions[1];\n                                params.schedulerOccurrenceCount = parseInt(value, 10);\n                            }\n                            else {\n                                throw 'COUNT must be a valid integer > 0';\n                            }\n                            break;\n\n                        case 'UNTIL':\n                            value = normalizeDate(value);\n                            params.schedulerEnd = angular_ui_scheduler_endOptions[2];\n                            params.schedulerEndDt = new Date(value);\n                            break;\n\n                        case 'BYMONTH':\n                            if (getValue(tokens, 'FREQ') === 'YEARLY' && getValue(tokens, 'BYDAY')) {\n                                params.yearlRepeatOption = 'other';\n                                params.yearlyOtherMonth = _.find(angular_ui_scheduler_months, function (x) {\n                                    return x.value === parseInt(value, 10);\n                                });\n                                if (!params.yearlyOtherMonth || !params.yearlyOtherMonth.name) {\n                                    throw 'BYMONTH must be an integer between 1 and 12';\n                                }\n                            }\n                            else {\n                                params.yearlyOption = 'month';\n                                params.yearlyMonth = _.find(angular_ui_scheduler_months, function (x) {\n                                    return x.value === parseInt(value, 10);\n                                });\n                                if (!params.yearlyMonth || !params.yearlyMonth.name) {\n                                    throw 'BYMONTH must be an integer between 1 and 12';\n                                }\n                            }\n                            break;\n                        default:\n                            $log.warn('rrule key `' + key + '` is invalid');\n                    }\n                }\n\n                function validate() {\n                    // Check what was put into params vars, and see if anything is\n                    // missing or not quite right.\n                    if (params.schedulerFrequency.name === 'weekly' && params.weekDays.length === 0) {\n                        throw 'Frequency is weekly, but BYDAYS value is missing.';\n                    }\n                    if (!params.schedulerStartDt) {\n                        throw 'Warning: start date was not provided';\n                    }\n                }\n\n                if (!rule) {\n                    throw 'No rule entered. Provide a valid RRule string.';\n                }\n\n                var tokens = rule.split(/;/);\n                if (!angular.isArray(tokens)) {\n                    throw 'No rule entered. Provide a valid RRule string.';\n                }\n\n                tokens.forEach(function (token) {\n                    setValue(token.split(/=/), tokens);\n                });\n                validate();\n\n                return params;\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}