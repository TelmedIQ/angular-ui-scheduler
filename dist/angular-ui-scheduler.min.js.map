{"version":3,"sources":["app.js","angularUiSchedulerCtrl.js","angularUiSchedulerDirective.js","filters/schDateStrFixFilter.js","filters/schZeroPadFilter.js","services/GetRule.js","services/InRangeFactory.js","services/SetRule.js"],"names":["angular","module","constant","controller","$scope","$filter","$log","$timezones","useTimezone","InRange","GetRule","SetRule","CreateObject","scope","requireFutureST","fn","this","requireFutureStartTime","getOptions","options","startDate","schedulerUTCTime","frequency","schedulerFrequency","value","interval","schedulerInterval","schedulerEnd","occurrenceCount","schedulerOccurrenceCount","endDate","schedulerEndDt","replace","match","p1","p2","p3","weekDays","yearlyRepeatOption","month","yearlyMonth","monthDay","yearlyMonthDay","setOccurrence","yearlyOccurrence","yearlyWeekDay","yearlyOtherMonth","monthlyRepeatOption","monthlyOccurrence","monthlyWeekDay","clearErrors","scheduler_weekDays_error","scheduler_endDt_error","resetStartDate","scheduler_interval_error","scheduler_occurrenceCount_error","scheduler_monthDay_error","scheduler_yearlyMonthDay_error","scheduler_form","$setValidity","$setPristine","setDetails","rrule","getRRule","rrule_nlp_description","toText","dateChoice","occurrence_list","all","date","i","local","dt","align","schedulerTimeZone","name","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","getTimezoneAbbreviation","push","utc","toISOString","toString","isValid","startDt","now","dateStr","adjNow","timeNow","timeFuture","validity","length","schedulerStartHour","schedulerStartMinute","schedulerStartSecond","scheduler_startTime_error","schedulerName","$valid","$dirty","$","addClass","test","$pristine","removeClass","Date","isNaN","startDateError","getTime","toUTC","e","schedulerIsValid","getValue","rule","setRRule","clear","setName","setDefaults","getUserTimezone","getLocal","setRequireFutureStartTime","opt","getRequireFutureStartTime","setShowRRule","showRRule","Init","params","schedulerShowTimeZone","current_timezone","isEmptyObject","error","_","find","timeZones","x","scheduleTimeChange","scheduleRepeatChange","moment","tz","scheduler_form_schedulerStartDt_error","resetError","variable","schedulerShowInterval","schedulerIntervalLabel","intervalLabel","endOptions","sheduler_frequency_error","showCalendar","fld","focus","monthlyRepeatChange","spinner","yearlyRepeatChange","setWeekday","event","day","indexOf","splice","target","blur","msg","schedulerEndChange","removeZonesReady","$on","JSON","parse","localStorage","zones","getZoneList","frequencyOptions","occurrences","weekdays","months","toDate","schedulerShowEvery","scheduler","directive","restrict","templateUrl","link","elem","attr","filter","yy","mm","dd","hh","mi","ss","n","pad","str","Math","pow","trim","substr","factory","isDate","dtstart","message","freq","RRule","toUpperCase","byweekday","isArray","undefined","bysetpos","bymonth","bymonthday","count","until","DAILY","min","max","rx","RegExp","set","key","pair","k","split","toWeekDays","days","darray","toLowerCase","warray","diffA","difference","diffB","setValue","l","j","timeString","result","parseInt","contains","monhthlyRepeatOption","setStartDate","p4","p5","p6","schedulerStartDt","yearlRepeatOption","yearlyOption"],"mappings":"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","file":"angular-ui-scheduler.min.js","sourcesContent":["angular.module('angular-ui-scheduler', ['Timezones'])\n    .constant('useTimezone', false);","/**\n * @ngdoc controller\n * @name angular-ui-scheduler:angularUiSchedulerCtrl\n *\n * @description\n *\n *\n * @requires $scope\n * */\nangular.module('angular-ui-scheduler')\n    .controller('angularUiSchedulerCtrl', [\"$scope\", \"$filter\", \"$log\", \"$timezones\", \"useTimezone\", \"InRange\", \"GetRule\", \"SetRule\", function ($scope, $filter, $log, $timezones, useTimezone, InRange, GetRule, SetRule) {\n\n        //region defaults\n        $scope.frequencyOptions = [\n            {name: 'None (run once)', value: 'none', intervalLabel: ''},\n            {name: 'Minute', value: 'minutely', intervalLabel: 'minutes'},\n            {name: 'Hour', value: 'hourly', intervalLabel: 'hours'},\n            {name: 'Day', value: 'daily', intervalLabel: 'days'},\n            {name: 'Week', value: 'weekly', intervalLabel: 'weeks'},\n            {name: 'Month', value: 'monthly', intervalLabel: 'months'},\n            {name: 'Year', value: 'yearly', intervalLabel: 'years'}\n        ];\n\n        $scope.endOptions = [\n            {name: 'Never', value: 'never'},\n            {name: 'After', value: 'after'},\n            {name: 'On Date', value: 'on'}\n        ];\n\n        $scope.occurrences = [\n            {name: 'first', value: 1},\n            {name: 'second', value: 2},\n            {name: 'third', value: 3},\n            {name: 'fourth', value: 4},\n            {name: 'last', value: -1}\n        ];\n\n        $scope.weekdays = [\n            {name: 'Sunday', value: 'su'},\n            {name: 'Monday', value: 'mo'},\n            {name: 'Tuesday', value: 'tu'},\n            {name: 'Wednesday', value: 'we'},\n            {name: 'Thursday', value: 'th'},\n            {name: 'Friday', value: 'fr'},\n            {name: 'Saturday', value: 'sa'},\n            {name: 'Day', value: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']},\n            {name: 'Weekday', value: ['mo', 'tu', 'we', 'th', 'fr']},\n            {name: 'Weekend day', value: ['sa', 'su']}\n        ];\n\n        $scope.months = [\n            {name: 'January', value: 1},\n            {name: 'February', value: 2},\n            {name: 'March', value: 3},\n            {name: 'April', value: 4},\n            {name: 'May', value: 5},\n            {name: 'June', value: 6},\n            {name: 'July', value: 7},\n            {name: 'August', value: 8},\n            {name: 'September', value: 9},\n            {name: 'October', value: 10},\n            {name: 'November', value: 11},\n            {name: 'December', value: 12}\n        ];\n        //endregion\n\n\n        // region default values\n\n        $scope.schedulerName = '';\n        $scope.weekDays = [];\n        $scope.schedulerStartHour = 0;\n        $scope.schedulerStartMinute = 0;\n        $scope.schedulerStartSecond = 0;\n        $scope.schedulerUTCTime = moment().toDate();\n        $scope.schedulerFrequency = $scope.frequencyOptions[0];\n        $scope.schedulerShowEvery = false;\n        $scope.schedulerEnd = $scope.endOptions[0];\n        $scope.schedulerInterval = 1;\n        $scope.schedulerOccurrenceCount = 1;\n        $scope.monthlyRepeatOption = 'day';\n        $scope.monthDay = 1;\n        $scope.monthlyOccurrence = $scope.occurrences[0];\n        $scope.monthlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyRepeatOption = 'month';\n        $scope.yearlyMonth = $scope.months[0];\n        $scope.yearlyMonthDay = 1;\n        $scope.yearlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyOtherMonth = $scope.months[0];\n        $scope.yearlyOccurrence = $scope.occurrences[0];\n\n        //Detail view\n        $scope.schedulerIsValid = false;\n        $scope.rrule_nlp_description = '';\n        $scope.rrule = '';\n        $scope.dateChoice = 'utc';\n        $scope.occurrence_list = [];\n\n        //endregion\n\n\n        function CreateObject(scope, requireFutureST) {\n            var fn = function () {\n\n                this.scope = scope;\n                this.useTimezone = useTimezone;\n                this.requireFutureStartTime = requireFutureST;\n\n                // Evaluate user intput and build options for passing to rrule\n                this.getOptions = function () {\n                    var options = {};\n                    options.startDate = this.scope.schedulerUTCTime;\n                    options.frequency = this.scope.schedulerFrequency.value;\n                    options.interval = this.scope.schedulerInterval;\n                    if (this.scope.schedulerEnd.value === 'after') {\n                        options.occurrenceCount = this.scope.schedulerOccurrenceCount;\n                    }\n                    if (this.scope.schedulerEnd.value === 'on') {\n                        options.endDate = scope.schedulerEndDt.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, function (match, p1, p2, p3) {\n                                return p3 + '-' + p1 + '-' + p2;\n                            }) + 'T' + this.scope.schedulerUTCTime.replace(/\\d{2}\\/\\d{2}\\/\\d{4} /, '').replace(/ UTC/, '') + 'Z';\n                    }\n                    if (this.scope.schedulerFrequency.value === 'weekly') {\n                        options.weekDays = this.scope.weekDays;\n                    }\n                    else if (this.scope.schedulerFrequency.value === 'yearly') {\n                        if (this.scope.yearlyRepeatOption === 'month') {\n                            options.month = this.scope.yearlyMonth.value;\n                            options.monthDay = this.scope.yearlyMonthDay;\n                        }\n                        else {\n                            options.setOccurrence = this.scope.yearlyOccurrence.value;\n                            options.weekDays = this.scope.yearlyWeekDay.value;\n                            options.month = this.scope.yearlyOtherMonth.value;\n                        }\n                    }\n                    else if (this.scope.schedulerFrequency.value === 'monthly') {\n                        if (this.scope.monthlyRepeatOption === 'day') {\n                            options.monthDay = this.scope.monthDay;\n                        }\n                        else {\n                            options.setOccurrence = this.scope.monthlyOccurrence.value;\n                            options.weekDays = this.scope.monthlyWeekDay.value;\n                        }\n                    }\n                    return options;\n                };\n\n                // Clear custom field errors\n                this.clearErrors = function () {\n                    this.scope.scheduler_weekDays_error = false;\n                    this.scope.scheduler_endDt_error = false;\n                    this.scope.resetStartDate();\n                    this.scope.scheduler_endDt_error = false;\n                    this.scope.scheduler_interval_error = false;\n                    this.scope.scheduler_occurrenceCount_error = false;\n                    this.scope.scheduler_monthDay_error = false;\n                    this.scope.scheduler_yearlyMonthDay_error = false;\n\n                    if (this.scope.scheduler_form && this.scope.scheduler_form.schedulerEndDt) {\n                        this.scope.scheduler_form.schedulerEndDt.$setValidity('custom-error', true);\n                        this.scope.scheduler_form.schedulerEndDt.$setPristine();\n                        this.scope.scheduler_form.$setPristine();\n                    }\n                };\n\n                // Set values for detail page\n                this.setDetails = function () {\n                    var rrule = this.getRRule(),\n                        scope = this.scope;\n                    if (rrule) {\n                        scope.rrule_nlp_description = rrule.toText();\n                        scope.dateChoice = 'local';\n                        scope.occurrence_list = [];\n                        rrule.all(function (date, i) {\n                            var local, dt;\n                            if (i < 10) {\n                                if (useTimezone) {\n                                    dt = $timezones.align(date, scope.schedulerTimeZone.name);\n                                    local = $filter('schZeroPad')(dt.getMonth() + 1, 2) + '/' +\n                                        $filter('schZeroPad')(dt.getDate(), 2) + '/' + dt.getFullYear() + ' ' +\n                                        $filter('schZeroPad')(dt.getHours(), 2) + ':' +\n                                        $filter('schZeroPad')(dt.getMinutes(), 2) + ':' +\n                                        $filter('schZeroPad')(dt.getSeconds(), 2) + ' ' +\n                                        dt.getTimezoneAbbreviation();\n                                }\n                                else {\n                                    local = $filter('date')(date, 'MM/dd/yyyy HH:mm:ss Z');\n                                }\n                                scope.occurrence_list.push({utc: $filter('schDateStrFix')(date.toISOString()), local: local});\n                                return true;\n                            }\n                            return false;\n                        });\n                        scope.rrule_nlp_description = rrule.toText().replace(/^RRule error.*$/, 'Natural language description not available');\n                        scope.rrule = rrule.toString();\n                    }\n                };\n\n                // Check the input form for errors\n                this.isValid = function () {\n                    var startDt, now, dateStr, adjNow, timeNow, timeFuture, validity = true;\n                    this.clearErrors();\n\n                    if (this.scope.schedulerFrequency.value !== 'none' && !InRange(this.scope.schedulerInterval, 1, 999, 3)) {\n                        this.scope.scheduler_interval_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerEnd.value === 'after' && !InRange(this.scope.schedulerOccurrenceCount, 1, 999, 3)) {\n                        this.scope.scheduler_occurrenceCount_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerFrequency.value === 'weekly' && this.scope.weekDays.length === 0) {\n                        this.scope.scheduler_weekDays_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerFrequency.value === 'monthly' && this.scope.monthlyRepeatOption === 'day' && !InRange(this.scope.monthDay, 1, 31, 99)) {\n                        this.scope.scheduler_monthDay_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerFrequency.value === 'yearly' && this.scope.yearlyRepeatOption === 'month' && !InRange(this.scope.yearlyMonthDay, 1, 31, 99)) {\n                        this.scope.scheduler_yearlyMonthDay_error = true;\n                        validity = false;\n                    }\n                    if (!(InRange(scope.schedulerStartHour, 0, 23, 2) && InRange(scope.schedulerStartMinute, 0, 59, 2) && InRange(scope.schedulerStartSecond, 0, 59, 2))) {\n                        this.scope.scheduler_startTime_error = true;\n                        validity = false;\n                    }\n                    if (!this.scope.scheduler_form.schedulerName.$valid) {\n                        // Make sure schedulerName requird error shows up\n                        this.scope.scheduler_form.schedulerName.$dirty = true;\n                        $('#schedulerName').addClass('ng-dirty');\n                        validity = false;\n                    }\n                    if (this.scope.schedulerEnd.value === 'on') {\n                        if (!/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(this.scope.schedulerEndDt)) {\n                            this.scope.scheduler_form.schedulerEndDt.$pristine = false;\n                            this.scope.scheduler_form.schedulerEndDt.$dirty = true;\n                            $('#schedulerEndDt').removeClass('ng-pristine').removeClass('ng-valid').removeClass('ng-valid-custom-error')\n                                .addClass('ng-dirty').addClass('ng-invalid').addClass('ng-invalid-custom-error');\n                            this.scope.scheduler_endDt_error = true;\n                            validity = false;\n                        }\n                    }\n                    if (this.scope.schedulerUTCTime) {\n                        try {\n                            startDt = new Date(this.scope.schedulerUTCTime);\n                            if (!isNaN(startDt)) {\n                                timeFuture = startDt.getTime();\n                                now = new Date();\n                                if (this.useTimezone) {\n                                    dateStr = now.getFullYear() + '-' +\n                                        $filter('schZeroPad')(now.getMonth() + 1, 2) + '-' +\n                                        $filter('schZeroPad')(now.getDate(), 2) + 'T' +\n                                        $filter('schZeroPad')(now.getHours(), 2) + ':' +\n                                        $filter('schZeroPad')(now.getMinutes(), 2) + ':' +\n                                        $filter('schZeroPad')(now.getSeconds(), 2) + '.000Z';\n                                    adjNow = $timezones.toUTC(dateStr, this.scope.schedulerTimeZone.name);   //Adjust to the selected TZ\n                                    timeNow = adjNow.getTime();\n                                }\n                                else {\n                                    timeNow = now.getTime();\n                                }\n                                if (this.requireFutureStartTime && timeNow >= timeFuture) {\n                                    this.scope.startDateError('Start time must be in the future');\n                                    validity = false;\n                                }\n                            }\n                            else {\n                                this.scope.startDateError('Invalid start time');\n                                validity = false;\n                            }\n                        }\n                        catch (e) {\n                            this.scope.startDateError('Invalid start time');\n                            validity = false;\n                        }\n                    }\n                    else {\n                        this.scope.startDateError('Provide a start time');\n                        validity = false;\n                    }\n\n                    scope.schedulerIsValid = validity;\n                    if (validity) {\n                        this.setDetails();\n                    }\n\n                    return validity;\n                };\n\n                // Returns an rrule object\n                this.getRRule = function () {\n                    var options = this.getOptions();\n                    return GetRule(options);\n                };\n\n                // Return object containing schedule name, string representation of rrule per iCalendar RFC,\n                // and options used to create rrule\n                this.getValue = function () {\n                    var rule = this.getRRule(),\n                        options = this.getOptions();\n                    return {\n                        name: scope.schedulerName,\n                        rrule: rule.toString(),\n                        options: options\n                    };\n                };\n\n                this.setRRule = function (rule) {\n                    this.clear();\n                    return SetRule(rule, this.scope);\n                };\n\n                this.setName = function (name) {\n                    this.scope.schedulerName = name;\n                };\n\n                // Clear the form, returning all elements to a default state\n                this.clear = function () {\n                    this.clearErrors();\n                    if (this.scope.scheduler_form && this.scope.scheduler_form.schedulerName) {\n                        this.scope.scheduler_form.schedulerName.$setPristine();\n                    }\n                    this.scope.setDefaults();\n                };\n\n                // Get the user's local timezone\n                this.getUserTimezone = function () {\n                    return $timezones.getLocal();\n                };\n\n                // futureStartTime setter/getter\n                this.setRequireFutureStartTime = function (opt) {\n                    this.requireFutureStartTime = opt;\n                };\n\n                this.getRequireFutureStartTime = function () {\n                    return this.requireFutureStartTime;\n                };\n\n                this.setShowRRule = function (opt) {\n                    scope.showRRule = opt;\n                };\n            };\n            return new fn();\n        }\n\n        function Init(params) {\n\n            var scope = params.scope,\n                requireFutureStartTime = params.requireFutureStartTime || false;\n\n            scope.schedulerShowTimeZone = useTimezone;\n\n            scope.setDefaults = function () {\n                if (useTimezone) {\n                    scope.current_timezone = $timezones.getLocal();\n                    if ($.isEmptyObject(scope.current_timezone) || !scope.current_timezone.name) {\n                        $log.error('Failed to find local timezone. Defaulting to America/New_York.');\n                        scope.current_timezone = {name: 'America/New_York'};\n                    }\n                    // Set the <select> to the browser's local timezone\n                    scope.schedulerTimeZone = _.find(scope.timeZones, function (x) {\n                        return x.name === scope.current_timezone.name;\n                    });\n                }\n                //LoadLookupValues(scope);\n                //SetDefaults(scope);\n                scope.scheduleTimeChange();\n                scope.scheduleRepeatChange();\n            };\n\n            scope.scheduleTimeChange = function () {\n                if (useTimezone) {\n                    scope.resetStartDate();\n                    try {\n\n                        //todo check\n                        scope.schedulerUTCTime = moment(scope.schedulerUTCTime).tz(schedulerTimeZone.name);\n\n                        scope.scheduler_form_schedulerStartDt_error = false;\n                        scope.scheduler_startTime_error = false;\n                    }\n                    catch (e) {\n                        scope.startDateError('Provide a valid start date and time');\n                    }\n                }\n                else {\n                    scope.scheduler_startTime_error = false;\n                    scope.scheduler_form_schedulerStartDt_error = false;\n                }\n            };\n\n            scope.resetError = function (variable) {\n                scope[variable] = false;\n            };\n\n            scope.scheduleRepeatChange = function () {\n                if (scope.schedulerFrequency && scope.schedulerFrequency.value !== '' && scope.schedulerFrequency.value !== 'none') {\n                    scope.schedulerInterval = 1;\n                    scope.schedulerShowInterval = true;\n                    scope.schedulerIntervalLabel = scope.schedulerFrequency.intervalLabel;\n                }\n                else {\n                    scope.schedulerShowInterval = false;\n                    scope.schedulerEnd = scope.endOptions[0];\n                }\n                scope.sheduler_frequency_error = false;\n            };\n\n            scope.showCalendar = function (fld) {\n                $('#' + fld).focus();\n            };\n\n            scope.monthlyRepeatChange = function () {\n                if (scope.monthlyRepeatOption !== 'day') {\n                    $('#monthDay').spinner('disable');\n                }\n                else {\n                    $('#monthDay').spinner('enable');\n                }\n            };\n\n            scope.yearlyRepeatChange = function () {\n                if (scope.yearlyRepeatOption !== 'month') {\n                    $('#yearlyRepeatDay').spinner('disable');\n                }\n                else {\n                    $('#yearlyRepeatDay').spinner('enable');\n                }\n            };\n\n            scope.setWeekday = function (event, day) {\n                // Add or remove day when user clicks checkbox button\n                var i = scope.weekDays.indexOf(day);\n                if (i >= 0) {\n                    scope.weekDays.splice(i, 1);\n                }\n                else {\n                    scope.weekDays.push(day);\n                }\n                $(event.target).blur();\n                scope.scheduler_weekDays_error = false;\n            };\n\n            scope.startDateError = function (msg) {\n                scope.scheduler_form_schedulerStartDt_error = msg;\n            };\n\n            scope.resetStartDate = function () {\n                scope.scheduler_form_schedulerStartDt_error = '';\n            };\n\n            scope.schedulerEndChange = function () {\n                var dt = new Date(), // date adjusted to local zone automatically\n                    month = $filter('schZeroPad')(dt.getMonth() + 1, 2),\n                    day = $filter('schZeroPad')(dt.getDate(), 2);\n                scope.schedulerEndDt = month + '/' + day + '/' + dt.getFullYear();\n                scope.schedulerOccurrenceCount = 1;\n            };\n\n            // When timezones become available, use to set defaults\n            if (scope.removeZonesReady) {\n                scope.removeZonesReady();\n            }\n            scope.removeZonesReady = scope.$on('zonesReady', function () {\n                scope.timeZones = JSON.parse(localStorage.zones);\n                scope.setDefaults();\n            });\n\n            if (useTimezone) {\n                // Build list of timezone <select> element options\n                $timezones.getZoneList(scope);\n            }\n            else {\n                scope.setDefaults();\n            }\n\n            return CreateObject(scope, requireFutureStartTime);\n\n        }\n\n        $scope.scheduler = Init({scope: $scope, requireFutureStartTime: false});\n    }]);\n","/**\n * @ngdoc directive\n * @name angular-ui-scheduler:angularUiScheduler\n *\n * @description\n *\n *\n * @restrict E\n * */\nangular.module('angular-ui-scheduler')\n    .directive('angularUiScheduler', function () {\n        return {\n            restrict: 'E',\n            templateUrl: 'angular-ui-scheduler/src/angularUiScheduler.html',\n            controller: 'angularUiSchedulerCtrl',\n            link: function (scope, elem, attr) {\n\n            }\n        };\n});\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schDateStrFixFilter\n *\n * @description\n\n * $filter('schDateStrFix')(s)  where s is a date string in ISO format: yyyy-mm-ddTHH:MM:SS.sssZ. Returns string in format: mm/dd/yyyy HH:MM:SS UTC\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schDateStrFix', function () {\n        return function (dateStr) {\n            return dateStr.replace(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*Z/, function (match, yy, mm, dd, hh, mi, ss) {\n                return mm + '/' + dd + '/' + yy + ' ' + hh + ':' + mi + ':' + ss + ' UTC';\n            });\n        };\n    });\n\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schZeroPadFilter\n *\n * @description\n * $filter('schZeroPad')(n, pad) -- or -- {{ n | afZeroPad:pad }}\n *\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schZeroPad', function () {\n        return function (n, pad) {\n            var str = (Math.pow(10, pad) + '').replace(/^1/, '') + (n + '').trim();\n            return str.substr(str.length - pad);\n        };\n    });","/**\n * @ngdoc service\n * @name angular-ui-scheduler:GetRule\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('GetRule',  [\"$log\", function ($log) {\n        return function (params) {\n            // Convert user inputs to an rrule. Returns rrule object using https://github.com/jkbr/rrule\n            // **list of 'valid values' found below in LoadLookupValues\n\n            var startDate = params.startDate,  // date object or string in yyyy-MM-ddTHH:mm:ss.sssZ format\n                frequency = params.frequency,  // string, optional, valid value from frequencyOptions\n                interval = params.interval,    // integer, optional\n                occurrenceCount = params.occurrenceCount,  //integer, optional\n                endDate = params.endDate,      // date object or string in yyyy-MM-dd format, optional\n                                               // ignored if occurrenceCount provided\n                month = params.month,          // integer, optional, valid value from months\n                monthDay = params.monthDay,    // integer, optional, between 1 and 31\n                weekDays = params.weekDays,     // integer, optional, valid value from weekdays\n                setOccurrence = params.setOccurrence, // integer, optional, valid value from occurrences\n                options = {}, i;\n\n            if (angular.isDate(startDate)) {\n                options.dtstart = startDate;\n            }\n            else {\n                try {\n                    options.dtstart = new Date(startDate);\n                }\n                catch (e) {\n                    $log.error('Date conversion failed. Attempted to convert ' + startDate + ' to Date. ' + e.message);\n                }\n            }\n\n            if (frequency && frequency !== 'none') {\n                options.freq = RRule[frequency.toUpperCase()];\n                options.interval = interval;\n\n                if (weekDays && typeof weekDays === 'string') {\n                    options.byweekday = RRule[weekDays.toUpperCase()];\n                }\n\n                if (weekDays && angular.isArray(weekDays)) {\n                    options.byweekday = [];\n                    for (i = 0; i < weekDays.length; i++) {\n                        options.byweekday.push(RRule[weekDays[i].toUpperCase()]);\n                    }\n                }\n\n                if (setOccurrence !== undefined && setOccurrence !== null) {\n                    options.bysetpos = setOccurrence;\n                }\n\n                if (month) {\n                    options.bymonth = month;\n                }\n\n                if (monthDay) {\n                    options.bymonthday = monthDay;\n                }\n\n                if (occurrenceCount) {\n                    options.count = occurrenceCount;\n                }\n                else if (endDate) {\n                    if (angular.isDate(endDate)) {\n                        options.until = endDate;\n                    }\n                    else {\n                        try {\n                            options.until = new Date(endDate);\n                        }\n                        catch (e) {\n                            $log.error('Date conversion failed. Attempted to convert ' + endDate + ' to Date. ' + e.message);\n                        }\n                    }\n                }\n            }\n            else {\n                // We only want to run 1x\n                options.freq = RRule.DAILY;\n                options.interval = 1;\n                options.count = 1;\n            }\n            return new RRule(options);\n        };\n    }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:InRangeFactory\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('InRange', function () {\n        return function (x, min, max, length) {\n            var rx = new RegExp('\\\\d{1,' + length + '}');\n            if (!rx.test(x)) {\n                return false;\n            }\n            if (x < min || x > max) {\n                return false;\n            }\n            return true;\n        };\n    });\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:SetRule\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('SetRule', [\"useTimezone\", \"$log\", \"$timezones\", \"$filter\", function (useTimezone, $log, $timezones, $filter) {\n        return function (rule, scope) {\n            var set, result = '', i,\n                setStartDate = false;\n\n            // Search the set of RRule keys for a particular key, returning its value\n            function getValue(set, key) {\n                var pair = _.find(set, function (x) {\n                    var k = x.split(/=/)[0].toUpperCase();\n                    return (k === key);\n                });\n                if (pair) {\n                    return pair.split(/=/)[1].toUpperCase();\n                }\n                return null;\n            }\n\n            function toWeekDays(days) {\n                var darray = days.toLowerCase().split(/,/),\n                    match = _.find(scope.weekdays, function (x) {\n                        var warray = (angular.isArray(x.value)) ? x.value : [x.value],\n                            diffA = _.difference(warray, darray),\n                            diffB = _.difference(darray, warray);\n                        return (diffA.length === 0 && diffB.length === 0);\n                    });\n                return match;\n            }\n\n            function setValue(pair, set) {\n                var key = pair.split(/=/)[0].toUpperCase(),\n                    value = pair.split(/=/)[1],\n                    days, l, j, dt, month, day, timeString;\n\n                if (key === 'NAME') {\n                    //name is not actually part of RRule, but we can handle it just the same\n                    scope.schedulerName = value;\n                }\n\n                if (key === 'FREQ') {\n                    l = value.toLowerCase();\n                    scope.schedulerFrequency = _.find(scope.frequencyOptions, function (opt) {\n                        scope.schedulerIntervalLabel = opt.intervalLabel;\n                        return opt.value === l;\n                    });\n                    if (!scope.schedulerFrequency || !scope.schedulerFrequency.name) {\n                        result = 'FREQ not found in list of valid options';\n                    }\n                }\n                if (key === 'INTERVAL') {\n                    if (parseInt(value, 10)) {\n                        scope.schedulerInterval = parseInt(value, 10);\n                        scope.schedulerShowInterval = true;\n                    }\n                    else {\n                        result = 'INTERVAL must contain an integer > 0';\n                    }\n                }\n                if (key === 'BYDAY') {\n                    if (getValue(set, 'FREQ') === 'WEEKLY') {\n                        days = value.split(/,/);\n                        scope.weekDays = [];\n                        for (j = 0; j < days.length; j++) {\n                            if (_.contains(['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'], days[j])) {\n                                scope.weekDays.push(days[j].toLowerCase());\n                                scope['weekDay' + days[j].toUpperCase() + 'Class'] = 'active'; //activate related button\n                            }\n                            else {\n                                result = 'BYDAY contains unrecognized day value(s)';\n                            }\n                        }\n                    }\n                    else if (getValue(set, 'FREQ') === 'MONTHLY') {\n                        scope.monthlyRepeatOption = 'other';\n                        scope.monthlyWeekDay = toWeekDays(value);\n                        if (!scope.monthlyWeekDay) {\n                            result = 'BYDAY contains unrecognized day value(s)';\n                        }\n                    }\n                    else {\n                        scope.yearlyRepeatOption = 'other';\n                        scope.yearlyWeekDay = toWeekDays(value);\n                        if (!scope.yearlyWeekDay) {\n                            result = 'BYDAY contains unrecognized day value(s)';\n                        }\n                    }\n                }\n                if (key === 'BYMONTHDAY') {\n                    if (parseInt(value, 10) && parseInt(value, 10) > 0 && parseInt(value, 10) < 32) {\n                        scope.monthDay = parseInt(value, 10);\n                        scope.monhthlyRepeatOption = 'day';\n                    }\n                    else {\n                        result = 'BYMONTHDAY must contain an integer between 1 and 31';\n                    }\n                }\n                if (key === 'DTSTART') {\n                    // The form has been reset to the local zone\n                    setStartDate = true;\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    if (useTimezone) {\n                        dt = new Date(value); // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2);\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                        scope.schedulerStartDt = month + '/' + day + '/' + dt.getFullYear();\n                        scope.schedulerStartHour = $filter('schZeroPad')(dt.getHours(), 2);\n                        scope.schedulerStartMinute = $filter('schZeroPad')(dt.getMinutes(), 2);\n                        scope.schedulerStartSecond = $filter('schZeroPad')(dt.getSeconds(), 2);\n                        scope.scheduleTimeChange();  // calc UTC\n                    }\n                    else {\n                        // expects inbound dates to be in ISO format: 2014-04-02T00:00:00.000Z\n                        scope.schedulerStartDt = value.replace(/T.*$/, '').replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1, p2, p3) {\n                            return p2 + '/' + p3 + '/' + p1;\n                        });\n                        timeString = value.replace(/^.*T/, '');\n                        scope.schedulerStartHour = $filter('schZeroPad')(timeString.substr(0, 2), 2);\n                        scope.schedulerStartMinute = $filter('schZeroPad')(timeString.substr(3, 2), 2);\n                        scope.schedulerStartSecond = $filter('schZeroPad')(timeString.substr(6, 2), 2);\n                    }\n                    scope.scheduleTimeChange();\n                }\n                if (key === 'BYSETPOS') {\n                    if (getValue(set, 'FREQ') === 'YEARLY') {\n                        scope.yearlRepeatOption = 'other';\n                        scope.yearlyOccurrence = _.find(scope.occurrences, function (x) {\n                            return (x.value === parseInt(value, 10));\n                        });\n                        if (!scope.yearlyOccurrence || !scope.yearlyOccurrence.name) {\n                            result = 'BYSETPOS was not in the set of 1,2,3,4,-1';\n                        }\n                    }\n                    else {\n                        scope.monthlyOccurrence = _.find(scope.occurrences, function (x) {\n                            return (x.value === parseInt(value, 10));\n                        });\n                        if (!scope.monthlyOccurrence || !scope.monthlyOccurrence.name) {\n                            result = 'BYSETPOS was not in the set of 1,2,3,4,-1';\n                        }\n                    }\n                }\n\n                if (key === 'COUNT') {\n                    if (parseInt(value, 10)) {\n                        scope.schedulerEnd = scope.endOptions[1];\n                        scope.schedulerOccurrenceCount = parseInt(value, 10);\n                    }\n                    else {\n                        result = 'COUNT must be a valid integer > 0';\n                    }\n                }\n\n                if (key === 'UNTIL') {\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    scope.schedulerEnd = scope.endOptions[2];\n                    if (useTimezone) {\n                        dt = new Date(value); // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2);\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                        scope.schedulerEndDt = month + '/' + day + '/' + dt.getFullYear();\n                    }\n                    else {\n                        scope.schedulerEndDt = value.replace(/T.*$/, '').replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1, p2, p3) {\n                            return p2 + '/' + p3 + '/' + p1;\n                        });\n                    }\n                }\n\n                if (key === 'BYMONTH') {\n                    if (getValue(set, 'FREQ') === 'YEARLY' && getValue(set, 'BYDAY')) {\n                        scope.yearlRepeatOption = 'other';\n                        scope.yearlyOtherMonth = _.find(scope.months, function (x) {\n                            return x.value === parseInt(value, 10);\n                        });\n                        if (!scope.yearlyOtherMonth || !scope.yearlyOtherMonth.name) {\n                            result = 'BYMONTH must be an integer between 1 and 12';\n                        }\n                    }\n                    else {\n                        scope.yearlyOption = 'month';\n                        scope.yearlyMonth = _.find(scope.months, function (x) {\n                            return x.value === parseInt(value, 10);\n                        });\n                        if (!scope.yearlyMonth || !scope.yearlyMonth.name) {\n                            result = 'BYMONTH must be an integer between 1 and 12';\n                        }\n                    }\n                }\n\n                if (key === 'BYMONTHDAY') {\n                    if (parseInt(value, 10)) {\n                        scope.yearlyMonthDay = parseInt(value, 10);\n                    }\n                    else {\n                        result = 'BYMONTHDAY must be an integer between 1 and 31';\n                    }\n                }\n            }\n\n            function isValid() {\n                // Check what was put into scope vars, and see if anything is\n                // missing or not quite right.\n                if (scope.schedulerFrequency.name === 'weekly' && scope.weekDays.length === 0) {\n                    result = 'Frequency is weekly, but BYDAYS value is missing.';\n                }\n                if (!setStartDate) {\n                    result = 'Warning: start date was not provided';\n                }\n            }\n\n            if (rule) {\n                set = rule.split(/;/);\n                if (angular.isArray(set)) {\n                    for (i = 0; i < set.length; i++) {\n                        setValue(set[i], set);\n                        if (result) {\n                            break;\n                        }\n                    }\n                    if (!result) {\n                        isValid();\n                    }\n                }\n                else {\n                    result = 'No rule entered. Provide a valid RRule string.';\n                }\n            }\n            else {\n                result = 'No rule entered. Provide a valid RRule string.';\n            }\n            if (result) {\n                $log.error(result);\n            }\n            return result;\n        };\n    }]);"],"sourceRoot":"/source/"}