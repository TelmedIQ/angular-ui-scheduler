{"version":3,"sources":["app.js","angularUiSchedulerCtrl.js","angularUiSchedulerDirective.js","filters/schZeroPadFilter.js","services/rRuleHelper.js"],"names":["angular","module","constant","controller","$scope","$filter","$log","rRuleHelper","angular_ui_scheduler_useTimezone","angular_ui_scheduler_frequencyOptions","angular_ui_scheduler_endOptions","angular_ui_scheduler_occurrences","angular_ui_scheduler_weekdays","angular_ui_scheduler_months","init","uiState","weekDays","schedulerStartDt","Date","schedulerFrequency","frequencyOptions","schedulerEnd","endOptions","schedulerInterval","schedulerOccurrenceCount","monthlyRepeatOption","monthDay","monthlyOccurrence","occurrences","monthlyWeekDay","weekdays","yearlyRepeatOption","yearlyMonth","months","yearlyWeekDay","yearlyOtherMonth","yearlyOccurrence","timeZones","moment","tz","names","setDefaults","schedulerShowTimeZone","schedulerStartHour","value","arguments","length","hours","toDate","getHours","schedulerStartMinute","minutes","getMinutes","schedulerStartSecond","seconds","getSeconds","scheduleTimeChange","scheduleRepeatChange","resetStartDate","scheduler_form_schedulerStartDt_error","scheduler_startTime_error","e","startDateError","schedulerShowInterval","schedulerIntervalLabel","intervalLabel","sheduler_frequency_error","resetError","variable","setWeekday","event","day","i","indexOf","splice","push","$","target","blur","scheduler_weekDays_error","msg","schedulerEndChange","clearErrors","scheduler_endDt_error","scheduler_interval_error","scheduler_occurrenceCount_error","scheduler_monthDay_error","getRRule","getRule","getValue","options","getOptions","rrule","toString","setRRule","rule","clear","setRule","$watch","state","name","directive","restrict","require","templateUrl","scope","hideStart","link","iElement","iAttrs","ngModelCtrl","$formatters","modelValue","debug","copy","$parsers","viewValue","newRule","$setViewValue","required","$validators","newVal","filter","n","pad","str","Math","pow","replace","trim","substr","factory","startDate","frequency","interval","occurrenceCount","endDate","add","month","setOccurrence","params","this","isDate","dtstart","error","message","freq","RRule","toUpperCase","byweekday","isArray","undefined","bysetpos","bymonth","bymonthday","count","until","DAILY","set","key","pair","_","find","x","k","split","toWeekDays","days","darray","toLowerCase","match","warray","diffA","difference","diffB","normalizeDate","test","p1","p2","p3","p4","p5","p6","setValue","token","tokens","l","opt","parseInt","j","contains","monhthlyRepeatOption","tmpDate","isValid","yearlRepeatOption","schedulerEndDt","yearlyOption","warn","validate","forEach"],"mappings":"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","file":"angular-ui-scheduler.min.js","sourcesContent":["angular.module('angular-ui-scheduler', [])\n    .constant('angular_ui_scheduler_hideStart', true)\n    .constant('angular_ui_scheduler_useTimezone', false);","/**\n * @ngdoc controller\n * @name angular-ui-scheduler:angularUiSchedulerCtrl\n *\n * @description\n *\n *\n * @requires $scope\n * */\nangular.module('angular-ui-scheduler')\n    .controller('angularUiSchedulerCtrl', [\"$scope\", \"$filter\", \"$log\", \"rRuleHelper\", \"angular_ui_scheduler_useTimezone\", \"angular_ui_scheduler_frequencyOptions\", \"angular_ui_scheduler_endOptions\", \"angular_ui_scheduler_occurrences\", \"angular_ui_scheduler_weekdays\", \"angular_ui_scheduler_months\", function ($scope, $filter, $log, rRuleHelper,\n                                                    angular_ui_scheduler_useTimezone,\n                                                    angular_ui_scheduler_frequencyOptions,\n                                                    angular_ui_scheduler_endOptions,\n                                                    angular_ui_scheduler_occurrences,\n                                                    angular_ui_scheduler_weekdays,\n                                                    angular_ui_scheduler_months) {\n\n        //region lookup fields\n\n        $scope.schedulerShowTimeZone = angular_ui_scheduler_useTimezone;\n\n        $scope.frequencyOptions = angular_ui_scheduler_frequencyOptions;\n\n        $scope.endOptions = angular_ui_scheduler_endOptions;\n\n        $scope.occurrences = angular_ui_scheduler_occurrences;\n\n        $scope.weekdays = angular_ui_scheduler_weekdays;\n\n        $scope.months = angular_ui_scheduler_months;\n\n        //endregion\n\n        //region this should be moved to time edit directive\n        $scope.schedulerStartHour = function (value) {\n            if (arguments.length) {\n                $scope.uiState.schedulerStartDt = moment($scope.uiState.schedulerStartDt).hours(value).toDate();\n            } else {\n                return $scope.schedulerStartDt.getHours();\n            }\n        };\n        $scope.schedulerStartMinute = function (value) {\n            if (arguments.length) {\n                $scope.uiState.schedulerStartDt = moment($scope.uiState.schedulerStartDt).minutes(value).toDate();\n            } else {\n                return $scope.uiState.schedulerStartDt.getMinutes();\n            }\n        };\n        $scope.schedulerStartSecond = function (value) {\n            if (arguments.length) {\n                $scope.uiState.schedulerStartDt = moment($scope.uiState.schedulerStartDt).seconds(value).toDate();\n            } else {\n                return $scope.uiState.schedulerStartDt.getSeconds();\n            }\n        };\n        //endregion\n\n        $scope.setDefaults = function () {\n            $scope.scheduleTimeChange();\n            $scope.scheduleRepeatChange();\n        };\n\n        $scope.scheduleTimeChange = function () {\n            if (angular_ui_scheduler_useTimezone) {\n                $scope.resetStartDate();\n                try {\n                    $scope.scheduler_form_schedulerStartDt_error = false;\n                    $scope.scheduler_startTime_error = false;\n                }\n                catch (e) {\n                    $scope.startDateError('Provide a valid start date and time');\n                }\n            }\n            else {\n                $scope.scheduler_startTime_error = false;\n                $scope.scheduler_form_schedulerStartDt_error = false;\n            }\n        };\n\n        $scope.scheduleRepeatChange = function () {\n            if ($scope.uiState.schedulerFrequency && $scope.uiState.schedulerFrequency.value !== '' && $scope.uiState.schedulerFrequency.value !== 'none') {\n                $scope.uiState.schedulerInterval = 1;\n                $scope.schedulerShowInterval = true;\n                $scope.schedulerIntervalLabel = $scope.uiState.schedulerFrequency.intervalLabel;\n            }\n            else {\n                $scope.schedulerShowInterval = false;\n                $scope.uiState.schedulerEnd = $scope.endOptions[0];\n            }\n            $scope.sheduler_frequency_error = false;\n        };\n\n        $scope.resetError = function (variable) {\n            $scope[variable] = false;\n        };\n\n        $scope.setWeekday = function (event, day) {\n            // Add or remove day when user clicks checkbox button\n            var i = $scope.uiState.weekDays.indexOf(day);\n            if (i >= 0) {\n                $scope.uiState.weekDays.splice(i, 1);\n            }\n            else {\n                $scope.uiState.weekDays.push(day);\n            }\n            $(event.target).blur();\n            $scope.scheduler_weekDays_error = false;\n        };\n\n        $scope.startDateError = function (msg) {\n            $scope.scheduler_form_schedulerStartDt_error = msg;\n        };\n\n        $scope.resetStartDate = function () {\n            $scope.scheduler_form_schedulerStartDt_error = '';\n        };\n\n        $scope.schedulerEndChange = function () {\n            $scope.uiState.schedulerOccurrenceCount = 1;\n        };\n\n        // Clear custom field errors\n        $scope.clearErrors = function () {\n            $scope.scheduler_weekDays_error = false;\n            $scope.scheduler_endDt_error = false;\n            $scope.resetStartDate();\n            $scope.scheduler_endDt_error = false;\n            $scope.scheduler_interval_error = false;\n            $scope.scheduler_occurrenceCount_error = false;\n            $scope.scheduler_monthDay_error = false;\n        };\n\n        // Set values for detail page\n        //$scope.setDetails = function () {\n        //    //Detail view\n        //    $scope.schedulerIsValid = false;\n        //    $scope.rrule_nlp_description = '';\n        //    $scope.rrule = '';\n        //    $scope.dateChoice = 'utc';\n        //    $scope.occurrence_list = [];\n        //\n        //    //var rrule = this.getRRule(),\n        //    //    scope = this.scope;\n        //    //if (rrule) {\n        //    //    scope.rrule_nlp_description = rrule.toText();\n        //    //    scope.dateChoice = 'local';\n        //    //    scope.occurrence_list = [];\n        //    //    rrule.all(function (date, i) {\n        //    //        var local, dt;\n        //    //        if (i < 10) {\n        //    //            if (angular_ui_scheduler_useTimezone) {\n        //    //                dt = $timezones.align(date, scope.schedulerTimeZone);\n        //    //                local = $filter('schZeroPad')(dt.getMonth() + 1, 2) + '/' +\n        //    //                    $filter('schZeroPad')(dt.getDate(), 2) + '/' + dt.getFullYear() + ' ' +\n        //    //                    $filter('schZeroPad')(dt.getHours(), 2) + ':' +\n        //    //                    $filter('schZeroPad')(dt.getMinutes(), 2) + ':' +\n        //    //                    $filter('schZeroPad')(dt.getSeconds(), 2) + ' ' +\n        //    //                    dt.getTimezoneAbbreviation();\n        //    //            }\n        //    //            else {\n        //    //                local = $filter('date')(date, 'MM/dd/yyyy HH:mm:ss Z');\n        //    //            }\n        //    //            scope.occurrence_list.push({utc: $filter('schDateStrFix')(date.toISOString()), local: local});\n        //    //            return true;\n        //    //        }\n        //    //        return false;\n        //    //    });\n        //    //    scope.rrule_nlp_description = rrule.toText().replace(/^RRule error.*$/, 'Natural language description not available');\n        //    //    scope.rrule = rrule.toString();\n        //    //}\n        //};\n\n        // Returns an rrule object\n        $scope.getRRule = function () {\n            return rRuleHelper.getRule($scope.uiState);\n        };\n\n        // Return object containing schedule name, string representation of rrule per iCalendar RFC and options used to create rrule\n        $scope.getValue = function () {\n            var rule = $scope.getRRule(),\n                options = rRuleHelper.getOptions($scope.uiState);\n            return {\n                rrule: $scope.getRRule().toString(),\n                options: options\n            };\n        };\n\n        $scope.setRRule = function (rule) {\n            $scope.clear();\n            rRuleHelper.setRule(rule, $scope.uiState);\n            $scope.scheduleRepeatChange();\n        };\n\n        // Clear the form, returning all elements to a default state\n        $scope.clear = function () {\n            $scope.clearErrors();\n            $scope.setDefaults();\n        };\n\n        function init() {\n            $scope.uiState = {\n                weekDays: [],\n                schedulerStartDt: new Date(),\n                schedulerFrequency: $scope.frequencyOptions[0],\n                schedulerEnd: $scope.endOptions[0],\n                schedulerInterval: 1,\n                schedulerOccurrenceCount: 1,\n                monthlyRepeatOption: 'day',\n                monthDay: 1,\n                monthlyOccurrence: $scope.occurrences[0],\n                monthlyWeekDay: $scope.weekdays[0],\n                yearlyRepeatOption: 'month',\n                yearlyMonth: $scope.months[0],\n                yearlyWeekDay: $scope.weekdays[0],\n                yearlyOtherMonth: $scope.months[0],\n                yearlyOccurrence: $scope.occurrences[0]\n                //schedulerEndDt: undefined\n            };\n\n            if (angular_ui_scheduler_useTimezone) {\n                $scope.timeZones = moment.tz.names();\n            }\n            $scope.setDefaults();\n        }\n\n        init();\n\n        //update role\n        $scope.$watch('uiState', function (state) {\n            $scope.rule = $scope.getValue();\n        }, true);\n\n    }]);\n","/**\n * @ngdoc directive\n * @name angular-ui-scheduler:angularUiScheduler\n *\n * @description\n *\n *\n * @restrict E\n * */\nangular.module('angular-ui-scheduler')\n    .constant('angular_ui_scheduler_frequencyOptions', [\n        {name: 'None (run once)', value: 'none', intervalLabel: ''},\n        {name: 'Minute', value: 'minutely', intervalLabel: 'minute(s)'},\n        {name: 'Hour', value: 'hourly', intervalLabel: 'hour(s)'},\n        {name: 'Day', value: 'daily', intervalLabel: 'day(s)'},\n        {name: 'Week', value: 'weekly', intervalLabel: 'week(s)'},\n        {name: 'Month', value: 'monthly', intervalLabel: 'month(s)'},\n        {name: 'Year', value: 'yearly', intervalLabel: 'year(s)'}\n    ])\n    .constant('angular_ui_scheduler_endOptions', [\n        {name: 'Never', value: 'never'},\n        {name: 'After', value: 'after'},\n        {name: 'On Date', value: 'on'}\n    ])\n    .constant('angular_ui_scheduler_occurrences', [\n        {name: 'first', value: 1},\n        {name: 'second', value: 2},\n        {name: 'third', value: 3},\n        {name: 'fourth', value: 4},\n        {name: 'last', value: -1}\n    ])\n    .constant('angular_ui_scheduler_weekdays', [\n        {name: 'Sunday', value: 'su'},\n        {name: 'Monday', value: 'mo'},\n        {name: 'Tuesday', value: 'tu'},\n        {name: 'Wednesday', value: 'we'},\n        {name: 'Thursday', value: 'th'},\n        {name: 'Friday', value: 'fr'},\n        {name: 'Saturday', value: 'sa'},\n        {name: 'Day', value: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']},\n        {name: 'Weekday', value: ['mo', 'tu', 'we', 'th', 'fr']},\n        {name: 'Weekend day', value: ['sa', 'su']}\n    ])\n    .constant('angular_ui_scheduler_months', [\n        {name: 'January', value: 1},\n        {name: 'February', value: 2},\n        {name: 'March', value: 3},\n        {name: 'April', value: 4},\n        {name: 'May', value: 5},\n        {name: 'June', value: 6},\n        {name: 'July', value: 7},\n        {name: 'August', value: 8},\n        {name: 'September', value: 9},\n        {name: 'October', value: 10},\n        {name: 'November', value: 11},\n        {name: 'December', value: 12}\n    ])\n    .directive('angularUiScheduler', [\"$log\", function ($log) {\n        return {\n            restrict: 'E',\n            require: 'ngModel',\n            templateUrl: 'angular-ui-scheduler/src/angularUiScheduler.html',\n            scope: {\n                rrule: '@',\n                hideStart: '='\n            },\n            controller: 'angularUiSchedulerCtrl',\n            link: function (scope, iElement, iAttrs, ngModelCtrl) {\n\n                //region handle ngModelCtrl\n                ngModelCtrl.$formatters.push(function (modelValue) {\n                    $log.debug('angularUiSchedulerCtrl $formatters', modelValue);\n                    return angular.copy(modelValue);\n                });\n\n                ngModelCtrl.$parsers.push(function (viewValue) {\n                    $log.debug('angularUiSchedulerCtrl $parsers', viewValue);\n                    return angular.copy(viewValue);\n                });\n\n                scope.$watch('rule', function (newRule) {\n                    $log.debug('angularUiSchedulerCtrl updates ngModel binding', newRule);\n                    ngModelCtrl.$setViewValue(angular.copy(newRule));\n                }, true);\n\n                //ngModelCtrl.$render = function () {\n                //    scope.role = ngModelCtrl.$viewValue;\n                //};\n\n                if (iAttrs.required) {\n                    ngModelCtrl.$validators.required = function (modelValue, viewValue) {\n                        return modelValue;\n                    };\n                }\n                //endregion\n\n                scope.$watch('rrule', function (newVal) {\n                    if (newVal) {\n                        $log.debug('setting rrule', newVal);\n                        scope.setRRule(newVal);\n                    }\n                });\n            }\n        };\n    }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schZeroPadFilter\n *\n * @description\n * $filter('schZeroPad')(n, pad) -- or -- {{ n | afZeroPad:pad }}\n *\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schZeroPad', function () {\n        return function (n, pad) {\n            var str = (Math.pow(10, pad) + '').replace(/^1/, '') + (n + '').trim();\n            return str.substr(str.length - pad);\n        };\n    });","/**\n * @ngdoc service\n * @name angular-ui-scheduler:rRuleHelper\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('rRuleHelper', [\"angular_ui_scheduler_useTimezone\", \"$log\", \"$filter\", \"angular_ui_scheduler_frequencyOptions\", \"angular_ui_scheduler_occurrences\", \"angular_ui_scheduler_endOptions\", \"angular_ui_scheduler_weekdays\", \"angular_ui_scheduler_months\", function (angular_ui_scheduler_useTimezone, $log, $filter,\n                                      angular_ui_scheduler_frequencyOptions,\n                                      angular_ui_scheduler_occurrences,\n                                      angular_ui_scheduler_endOptions,\n                                      angular_ui_scheduler_weekdays,\n                                      angular_ui_scheduler_months) {\n        return {\n\n            // Evaluate user intput and build options for passing to rrule\n            getOptions: function (scope) {\n                var options = {};\n                options.startDate = scope.schedulerStartDt;\n                options.frequency = scope.schedulerFrequency.value;\n                options.interval = scope.schedulerInterval;\n                if (scope.schedulerEnd.value === 'after') {\n                    options.occurrenceCount = scope.schedulerOccurrenceCount;\n                }\n                if (scope.schedulerEnd.value === 'on') {\n                    options.endDate = moment(scope.schedulerStartDt).add(1, 'd').toDate();\n                }\n                if (scope.schedulerFrequency.value === 'weekly') {\n                    options.weekDays = scope.weekDays;\n                }\n                else if (scope.schedulerFrequency.value === 'yearly') {\n                    if (scope.yearlyRepeatOption === 'month') {\n                        options.month = scope.yearlyMonth.value;\n                        options.monthDay = scope.monthDay;\n                    }\n                    else {\n                        options.setOccurrence = scope.yearlyOccurrence.value;\n                        options.weekDays = scope.yearlyWeekDay.value;\n                        options.month = scope.yearlyOtherMonth.value;\n                    }\n                }\n                else if (scope.schedulerFrequency.value === 'monthly') {\n                    if (scope.monthlyRepeatOption === 'day') {\n                        options.monthDay = scope.monthDay;\n                    }\n                    else {\n                        options.setOccurrence = scope.monthlyOccurrence.value;\n                        options.weekDays = scope.monthlyWeekDay.value;\n                    }\n                }\n                return options;\n            },\n\n            //returns rrule based on current state of UI\n            getRule: function (scope) {\n\n                var params = this.getOptions(scope);\n\n                // Convert user inputs to an rrule. Returns rrule object using https://github.com/jkbr/rrule\n                // **list of 'valid values' found below in LoadLookupValues\n\n                var startDate = params.startDate,  // date object or string in yyyy-MM-ddTHH:mm:ss.sssZ format\n                    frequency = params.frequency,  // string, optional, valid value from frequencyOptions\n                    interval = params.interval,    // integer, optional\n                    occurrenceCount = params.occurrenceCount,  //integer, optional\n                    endDate = params.endDate,      // date object or string in yyyy-MM-dd format, optional\n                                                   // ignored if occurrenceCount provided\n                    month = params.month,          // integer, optional, valid value from months\n                    monthDay = params.monthDay,    // integer, optional, between 1 and 31\n                    weekDays = params.weekDays,     // integer, optional, valid value from weekdays\n                    setOccurrence = params.setOccurrence, // integer, optional, valid value from occurrences\n                    options = {}, i;\n\n                if (angular.isDate(startDate)) {\n                    options.dtstart = startDate;\n                }\n                else {\n                    try {\n                        options.dtstart = new Date(startDate);\n                    }\n                    catch (e) {\n                        $log.error('Date conversion failed. Attempted to convert ' + startDate + ' to Date. ' + e.message);\n                    }\n                }\n\n                if (frequency && frequency !== 'none') {\n                    options.freq = RRule[frequency.toUpperCase()];\n                    options.interval = interval;\n\n                    if (weekDays && typeof weekDays === 'string') {\n                        options.byweekday = RRule[weekDays.toUpperCase()];\n                    }\n\n                    if (weekDays && angular.isArray(weekDays)) {\n                        options.byweekday = [];\n                        for (i = 0; i < weekDays.length; i++) {\n                            options.byweekday.push(RRule[weekDays[i].toUpperCase()]);\n                        }\n                    }\n\n                    if (setOccurrence !== undefined && setOccurrence !== null) {\n                        options.bysetpos = setOccurrence;\n                    }\n\n                    if (month) {\n                        options.bymonth = month;\n                    }\n\n                    if (monthDay) {\n                        options.bymonthday = monthDay;\n                    }\n\n                    if (occurrenceCount) {\n                        options.count = occurrenceCount;\n                    }\n                    else if (endDate) {\n                        if (angular.isDate(endDate)) {\n                            options.until = endDate;\n                        }\n                        else {\n                            try {\n                                options.until = new Date(endDate);\n                            }\n                            catch (e) {\n                                $log.error('Date conversion failed. Attempted to convert ' + endDate + ' to Date. ' + e.message);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // We only want to run 1x\n                    options.freq = RRule.DAILY;\n                    options.interval = 1;\n                    options.count = 1;\n                }\n                return new RRule(options);\n            },\n\n            //configures UI based on rrule\n            setRule: function (rule, params) {\n\n                // Search the tokens of RRule keys for a particular key, returning its value\n                function getValue(set, key) {\n                    var pair = _.find(set, function (x) {\n                        var k = x.split(/=/)[0].toUpperCase();\n                        return (k === key);\n                    });\n                    if (pair) {\n                        return pair.split(/=/)[1].toUpperCase();\n                    }\n                    return null;\n                }\n\n                function toWeekDays(days) {\n                    var darray = days.toLowerCase().split(/,/),\n                        match = _.find(angular_ui_scheduler_weekdays, function (x) {\n                            var warray = (angular.isArray(x.value)) ? x.value : [x.value],\n                                diffA = _.difference(warray, darray),\n                                diffB = _.difference(darray, warray);\n                            return (diffA.length === 0 && diffB.length === 0);\n                        });\n                    return match;\n                }\n\n                function normalizeDate(value) {\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    return value;\n                }\n\n                function setValue(token, tokens) {\n\n                    var key = token[0].toUpperCase(),\n                        value = token[1];\n\n                    switch (key) {\n                        case 'FREQ':\n                            var l = value.toLowerCase();\n                            params.schedulerFrequency = _.find(angular_ui_scheduler_frequencyOptions, function (opt) {\n                                params.schedulerIntervalLabel = opt.intervalLabel;\n                                return opt.value === l;\n                            });\n                            if (!params.schedulerFrequency || !params.schedulerFrequency.name) {\n                                throw 'FREQ not found in list of valid options';\n                            }\n                            break;\n\n                        case 'INTERVAL' :\n                            if (parseInt(value, 10)) {\n                                params.schedulerInterval = parseInt(value, 10);\n                                params.schedulerShowInterval = true;\n                            }\n                            else {\n                                throw 'INTERVAL must contain an integer > 0';\n                            }\n                            break;\n\n                        case 'BYDAY':\n                            if (getValue(tokens, 'FREQ') === 'WEEKLY') {\n                                var days = value.split(/,/);\n                                params.weekDays = [];\n                                for (var j = 0; j < days.length; j++) {\n                                    if (_.contains(['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'], days[j])) {\n                                        params.weekDays.push(days[j].toLowerCase());\n                                        params['weekDay' + days[j].toUpperCase() + 'Class'] = 'active'; //activate related button\n                                    }\n                                    else {\n                                        throw 'BYDAY contains unrecognized day value(s)';\n                                    }\n                                }\n                            }\n                            else if (getValue(tokens, 'FREQ') === 'MONTHLY') {\n                                params.monthlyRepeatOption = 'other';\n                                params.monthlyWeekDay = toWeekDays(value);\n                                if (!params.monthlyWeekDay) {\n                                    throw 'BYDAY contains unrecognized day value(s)';\n                                }\n                            }\n                            else {\n                                params.yearlyRepeatOption = 'other';\n                                params.yearlyWeekDay = toWeekDays(value);\n                                if (!params.yearlyWeekDay) {\n                                    throw 'BYDAY contains unrecognized day value(s)';\n                                }\n                            }\n                            break;\n\n                        case 'BYMONTHDAY':\n                            if (parseInt(value, 10) && parseInt(value, 10) > 0 && parseInt(value, 10) < 32) {\n                                params.monthDay = parseInt(value, 10);\n                                params.monhthlyRepeatOption = 'day';\n                            }\n                            else {\n                                throw 'BYMONTHDAY must contain an integer between 1 and 31';\n                            }\n                            break;\n\n                        case 'DTSTART':\n                            // The form has been reset to the local zone\n                            value = normalizeDate(value);\n                            var tmpDate = moment(value);\n                            if (!tmpDate.isValid()) {\n                                throw 'Invalid DTSTART: ' + value;\n                            }\n                            params.schedulerStartDt = tmpDate.toDate();\n                            break;\n\n                        case 'BYSETPOS':\n                            if (getValue(tokens, 'FREQ') === 'YEARLY') {\n                                params.yearlRepeatOption = 'other';\n                                params.yearlyOccurrence = _.find(angular_ui_scheduler_occurrences, function (x) {\n                                    return (x.value === parseInt(value, 10));\n                                });\n                                if (!params.yearlyOccurrence || !params.yearlyOccurrence.name) {\n                                    throw 'BYSETPOS was not in the tokens of 1,2,3,4,-1';\n                                }\n                            }\n                            else {\n                                params.monthlyOccurrence = _.find(angular_ui_scheduler_occurrences, function (x) {\n                                    return (x.value === parseInt(value, 10));\n                                });\n                                if (!params.monthlyOccurrence || !params.monthlyOccurrence.name) {\n                                    throw 'BYSETPOS was not in the tokens of 1,2,3,4,-1';\n                                }\n                            }\n                            break;\n\n                        case 'COUNT':\n                            if (parseInt(value, 10)) {\n                                params.schedulerEnd = angular_ui_scheduler_endOptions[1];\n                                params.schedulerOccurrenceCount = parseInt(value, 10);\n                            }\n                            else {\n                                throw 'COUNT must be a valid integer > 0';\n                            }\n                            break;\n\n                        case 'UNTIL':\n                            value = normalizeDate(value);\n                            params.schedulerEnd = angular_ui_scheduler_endOptions[2];\n                            params.schedulerEndDt = new Date(value);\n                            break;\n\n                        case 'BYMONTH':\n                            if (getValue(tokens, 'FREQ') === 'YEARLY' && getValue(tokens, 'BYDAY')) {\n                                params.yearlRepeatOption = 'other';\n                                params.yearlyOtherMonth = _.find(angular_ui_scheduler_months, function (x) {\n                                    return x.value === parseInt(value, 10);\n                                });\n                                if (!params.yearlyOtherMonth || !params.yearlyOtherMonth.name) {\n                                    throw 'BYMONTH must be an integer between 1 and 12';\n                                }\n                            }\n                            else {\n                                params.yearlyOption = 'month';\n                                params.yearlyMonth = _.find(angular_ui_scheduler_months, function (x) {\n                                    return x.value === parseInt(value, 10);\n                                });\n                                if (!params.yearlyMonth || !params.yearlyMonth.name) {\n                                    throw 'BYMONTH must be an integer between 1 and 12';\n                                }\n                            }\n                            break;\n                        default:\n                            $log.warn('rrule key `' + key + '` is invalid');\n                    }\n                }\n\n                function validate() {\n                    // Check what was put into params vars, and see if anything is\n                    // missing or not quite right.\n                    if (params.schedulerFrequency.name === 'weekly' && params.weekDays.length === 0) {\n                        throw 'Frequency is weekly, but BYDAYS value is missing.';\n                    }\n                    if (!params.schedulerStartDt) {\n                        throw 'Warning: start date was not provided';\n                    }\n                }\n\n                if (!rule) {\n                    throw 'No rule entered. Provide a valid RRule string.';\n                }\n\n                var tokens = rule.split(/;/);\n                if (!angular.isArray(tokens)) {\n                    throw 'No rule entered. Provide a valid RRule string.';\n                }\n\n                tokens.forEach(function (token) {\n                    setValue(token.split(/=/), tokens);\n                });\n                validate();\n\n                return params;\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}