{"version":3,"sources":["app.js","angularUiSchedulerCtrl.js","angularUiSchedulerDirective.js","filters/schDateStrFixFilter.js","filters/schZeroPadFilter.js","services/CreateObjectFactory.js","services/GetRule.js","services/InRangeFactory.js","services/SchedulerInit.js","services/SetRule.js"],"names":["angular","module","constant","controller","$scope","$filter","frequencyOptions","name","value","intervalLabel","endOptions","occurrences","weekdays","months","defaultDate","Date","defaultMonth","getMonth","defaultDay","getDate","defaultDateStr","getFullYear","schedulerName","weekDays","schedulerStartHour","schedulerStartMinute","schedulerStartSecond","schedulerStartDt","schedulerFrequency","schedulerShowEvery","schedulerEnd","schedulerInterval","schedulerOccurrenceCount","monthlyRepeatOption","monthDay","monthlyOccurrence","monthlyWeekDay","yearlyRepeatOption","yearlyMonth","yearlyMonthDay","yearlyWeekDay","yearlyOtherMonth","yearlyOccurrence","weekDayMOClass","weekDayTUClass","weekDayWEClass","weekDayTHClass","weekDayFRClass","weekDaySAClass","weekDaySUClass","schedulerIsValid","rrule_nlp_description","rrule","dateChoice","occurrence_list","directive","restrict","templateUrl","link","scope","elem","attr","filter","dateStr","replace","match","yy","mm","dd","hh","mi","ss","n","pad","str","Math","pow","trim","substr","length","factory","useTimezone","GetRule","SetDefaults","$timezones","SetRule","InRange","requireFutureST","fn","this","requireFutureStartTime","getOptions","options","startDate","schedulerUTCTime","frequency","interval","occurrenceCount","endDate","schedulerEndDt","p1","p2","p3","month","setOccurrence","clearErrors","scheduler_weekDays_error","scheduler_endDt_error","resetStartDate","scheduler_interval_error","scheduler_occurrenceCount_error","scheduler_monthDay_error","scheduler_yearlyMonthDay_error","scheduler_form","$setValidity","$setPristine","setDetails","getRRule","toText","all","date","i","local","dt","align","schedulerTimeZone","getHours","getMinutes","getSeconds","getTimezoneAbbreviation","push","utc","toISOString","toString","isValid","startDt","now","adjNow","timeNow","timeFuture","validity","scheduler_startTime_error","$valid","$dirty","$","addClass","test","$pristine","removeClass","isNaN","startDateError","getTime","toUTC","e","getValue","rule","setRRule","clear","setName","setDefaults","getUserTimezone","getLocal","setRequireFutureStartTime","opt","getRequireFutureStartTime","setShowRRule","showRRule","$log","params","isDate","dtstart","error","message","freq","RRule","toUpperCase","byweekday","isArray","undefined","bysetpos","bymonth","bymonthday","count","until","DAILY","x","min","max","rx","RegExp","CreateObject","showUTCField","schedulerShowTimeZone","schedulerShowUTCStartTime","current_timezone","isEmptyObject","_","find","timeZones","scheduleTimeChange","scheduleRepeatChange","scheduler_form_schedulerStartDt_error","resetError","variable","schedulerShowInterval","schedulerIntervalLabel","sheduler_frequency_error","showCalendar","fld","focus","monthlyRepeatChange","spinner","yearlyRepeatChange","setWeekday","event","day","indexOf","splice","target","blur","msg","schedulerEndChange","removeZonesReady","$on","JSON","parse","localStorage","zones","getZoneList","set","key","pair","k","split","toWeekDays","days","darray","toLowerCase","warray","diffA","difference","diffB","setValue","l","j","timeString","result","parseInt","contains","monhthlyRepeatOption","setStartDate","p4","p5","p6","yearlRepeatOption","yearlyOption"],"mappings":"AAAAA,QAAAC,OAAA,2BACAC,SAAA,oBAAA,SACAA,SAAA,eAAA,GACAA,SAAA,gBAAA,GCMAF,QAAAC,OAAA,wBACAE,WAAA,0BAAA,SAAA,UAAA,SAAAC,EAAAC,GAGAD,EAAAE,mBACAC,KAAA,kBAAAC,MAAA,OAAAC,cAAA,KACAF,KAAA,SAAAC,MAAA,WAAAC,cAAA,YACAF,KAAA,OAAAC,MAAA,SAAAC,cAAA,UACAF,KAAA,MAAAC,MAAA,QAAAC,cAAA,SACAF,KAAA,OAAAC,MAAA,SAAAC,cAAA,UACAF,KAAA,QAAAC,MAAA,UAAAC,cAAA,WACAF,KAAA,OAAAC,MAAA,SAAAC,cAAA,UAGAL,EAAAM,aACAH,KAAA,QAAAC,MAAA,UACAD,KAAA,QAAAC,MAAA,UACAD,KAAA,UAAAC,MAAA,OAGAJ,EAAAO,cACAJ,KAAA,QAAAC,MAAA,IACAD,KAAA,SAAAC,MAAA,IACAD,KAAA,QAAAC,MAAA,IACAD,KAAA,SAAAC,MAAA,IACAD,KAAA,OAAAC,MAAA,KAGAJ,EAAAQ,WACAL,KAAA,SAAAC,MAAA,OACAD,KAAA,SAAAC,MAAA,OACAD,KAAA,SAAAC,MAAA,OACAD,KAAA,YAAAC,MAAA,OACAD,KAAA,WAAAC,MAAA,OACAD,KAAA,SAAAC,MAAA,OACAD,KAAA,WAAAC,MAAA,OACAD,KAAA,MAAAC,OAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,QACAD,KAAA,UAAAC,OAAA,KAAA,KAAA,KAAA,KAAA,QACAD,KAAA,cAAAC,OAAA,KAAA,QAGAJ,EAAAS,SACAN,KAAA,UAAAC,MAAA,IACAD,KAAA,WAAAC,MAAA,IACAD,KAAA,QAAAC,MAAA,IACAD,KAAA,QAAAC,MAAA,IACAD,KAAA,MAAAC,MAAA,IACAD,KAAA,OAAAC,MAAA,IACAD,KAAA,OAAAC,MAAA,IACAD,KAAA,SAAAC,MAAA,IACAD,KAAA,YAAAC,MAAA,IACAD,KAAA,UAAAC,MAAA,KACAD,KAAA,WAAAC,MAAA,KACAD,KAAA,WAAAC,MAAA,IAMA,IAAAM,GAAA,GAAAC,MACAC,EAAAX,EAAA,cAAAS,EAAAG,WAAA,EAAA,GACAC,EAAAb,EAAA,cAAAS,EAAAK,UAAA,GACAC,EAAAJ,EAAA,IAAAE,EAAA,IAAAJ,EAAAO,aACAjB,GAAAkB,cAAA,GACAlB,EAAAmB,YACAnB,EAAAoB,mBAAA,KACApB,EAAAqB,qBAAA,KACArB,EAAAsB,qBAAA,KACAtB,EAAAuB,iBAAAP,EACAhB,EAAAwB,mBAAAxB,EAAAE,iBAAA,GACAF,EAAAyB,oBAAA,EACAzB,EAAA0B,aAAA1B,EAAAM,WAAA,GACAN,EAAA2B,kBAAA,EACA3B,EAAA4B,yBAAA,EACA5B,EAAA6B,oBAAA,MACA7B,EAAA8B,SAAA,EACA9B,EAAA+B,kBAAA/B,EAAAO,YAAA,GACAP,EAAAgC,eAAAhC,EAAAQ,SAAA,GACAR,EAAAiC,mBAAA,QACAjC,EAAAkC,YAAAlC,EAAAS,OAAA,GACAT,EAAAmC,eAAA,EACAnC,EAAAoC,cAAApC,EAAAQ,SAAA,GACAR,EAAAqC,iBAAArC,EAAAS,OAAA,GACAT,EAAAsC,iBAAAtC,EAAAO,YAAA,GACAP,EAAAuC,eAAA,GACAvC,EAAAwC,eAAA,GACAxC,EAAAyC,eAAA,GACAzC,EAAA0C,eAAA,GACA1C,EAAA2C,eAAA,GACA3C,EAAA4C,eAAA,GACA5C,EAAA6C,eAAA,GAGA7C,EAAA8C,kBAAA,EACA9C,EAAA+C,sBAAA,GACA/C,EAAAgD,MAAA,GACAhD,EAAAiD,WAAA,MACAjD,EAAAkD,sBCjGAtD,QAAAC,OAAA,wBACAsD,UAAA,qBAAA,WACA,OACAC,SAAA,IACAC,YAAA,mDACAtD,WAAA,yBACAuD,KAAA,SAAAC,EAAAC,EAAAC,QCPA7D,QAAAC,OAAA,wBACA6D,OAAA,gBAAA,WACA,MAAA,UAAAC,GACA,MAAAA,GAAAC,QAAA,qDAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAJ,GAAA,IAAAC,EAAA,IAAAF,EAAA,IAAAG,EAAA,IAAAC,EAAA,IAAAC,EAAA,YCJAvE,QAAAC,OAAA,wBACA6D,OAAA,aAAA,WACA,MAAA,UAAAU,EAAAC,GACA,GAAAC,IAAAC,KAAAC,IAAA,GAAAH,GAAA,IAAAT,QAAA,KAAA,KAAAQ,EAAA,IAAAK,MACA,OAAAH,GAAAI,OAAAJ,EAAAK,OAAAN,MCFAzE,QAAAC,OAAA,wBACA+E,QAAA,gBAAA,cAAA,UAAA,UAAA,cAAA,aAAA,UAAA,UAAA,SAAAC,EAAA5E,EAAA6E,EAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAA,UAAA3B,EAAA4B,GACA,GAAAC,GAAA,WAEAC,KAAA9B,MAAAA,EACA8B,KAAAR,YAAAA,EACAQ,KAAAC,uBAAAH,EAGAE,KAAAE,WAAA,WACA,GAAAC,KAmCA,OAlCAA,GAAAC,UAAAJ,KAAA9B,MAAAmC,iBACAF,EAAAG,UAAAN,KAAA9B,MAAA/B,mBAAApB,MACAoF,EAAAI,SAAAP,KAAA9B,MAAA5B,kBACA,UAAA0D,KAAA9B,MAAA7B,aAAAtB,QACAoF,EAAAK,gBAAAR,KAAA9B,MAAA3B,0BAEA,OAAAyD,KAAA9B,MAAA7B,aAAAtB,QACAoF,EAAAM,QAAAvC,EAAAwC,eAAAnC,QAAA,4BAAA,SAAAC,EAAAmC,EAAAC,EAAAC,GACA,MAAAA,GAAA,IAAAF,EAAA,IAAAC,IACA,IAAAZ,KAAA9B,MAAAmC,iBAAA9B,QAAA,uBAAA,IAAAA,QAAA,OAAA,IAAA,KAEA,WAAAyB,KAAA9B,MAAA/B,mBAAApB,MACAoF,EAAArE,SAAAkE,KAAA9B,MAAApC,SAEA,WAAAkE,KAAA9B,MAAA/B,mBAAApB,MACA,UAAAiF,KAAA9B,MAAAtB,oBACAuD,EAAAW,MAAAd,KAAA9B,MAAArB,YAAA9B,MACAoF,EAAA1D,SAAAuD,KAAA9B,MAAApB,iBAGAqD,EAAAY,cAAAf,KAAA9B,MAAAjB,iBAAAlC,MACAoF,EAAArE,SAAAkE,KAAA9B,MAAAnB,cAAAhC,MACAoF,EAAAW,MAAAd,KAAA9B,MAAAlB,iBAAAjC,OAGA,YAAAiF,KAAA9B,MAAA/B,mBAAApB,QACA,QAAAiF,KAAA9B,MAAA1B,oBACA2D,EAAA1D,SAAAuD,KAAA9B,MAAAzB,UAGA0D,EAAAY,cAAAf,KAAA9B,MAAAxB,kBAAA3B,MACAoF,EAAArE,SAAAkE,KAAA9B,MAAAvB,eAAA5B,QAGAoF,GAIAH,KAAAgB,YAAA,WACAhB,KAAA9B,MAAA+C,0BAAA,EACAjB,KAAA9B,MAAAgD,uBAAA,EACAlB,KAAA9B,MAAAiD,iBACAnB,KAAA9B,MAAAgD,uBAAA,EACAlB,KAAA9B,MAAAkD,0BAAA,EACApB,KAAA9B,MAAAmD,iCAAA,EACArB,KAAA9B,MAAAoD,0BAAA,EACAtB,KAAA9B,MAAAqD,gCAAA,EAEAvB,KAAA9B,MAAAsD,gBAAAxB,KAAA9B,MAAAsD,eAAAd,iBACAV,KAAA9B,MAAAsD,eAAAd,eAAAe,aAAA,gBAAA,GACAzB,KAAA9B,MAAAsD,eAAAd,eAAAgB,eACA1B,KAAA9B,MAAAsD,eAAAE,iBAKA1B,KAAA2B,WAAA,WACA,GAAAhE,GAAAqC,KAAA4B,WACA1D,EAAA8B,KAAA9B,KACAP,KACAO,EAAAR,sBAAAC,EAAAkE,SACA3D,EAAAN,WAAA,QACAM,EAAAL,mBACAF,EAAAmE,IAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAC,CACA,OAAA,IAAAF,GACAxC,GACA0C,EAAAvC,EAAAwC,MAAAJ,EAAA7D,EAAAkE,kBAAAtH,MACAmH,EAAArH,EAAA,cAAAsH,EAAA1G,WAAA,EAAA,GAAA,IACAZ,EAAA,cAAAsH,EAAAxG,UAAA,GAAA,IAAAwG,EAAAtG,cAAA,IACAhB,EAAA,cAAAsH,EAAAG,WAAA,GAAA,IACAzH,EAAA,cAAAsH,EAAAI,aAAA,GAAA,IACA1H,EAAA,cAAAsH,EAAAK,aAAA,GAAA,IACAL,EAAAM,2BAGAP,EAAArH,EAAA,QAAAmH,EAAA,yBAEA7D,EAAAL,gBAAA4E,MAAAC,IAAA9H,EAAA,iBAAAmH,EAAAY,eAAAV,MAAAA,KACA,IAEA,IAEA/D,EAAAR,sBAAAC,EAAAkE,SAAAtD,QAAA,kBAAA,8CACAL,EAAAP,MAAAA,EAAAiF,aAKA5C,KAAA6C,QAAA,WACA,GAAAC,GAAAC,EAAAzE,EAAA0E,EAAAC,EAAAC,EAAAC,GAAA,CA+CA,IA9CAnD,KAAAgB,cAEA,SAAAhB,KAAA9B,MAAA/B,mBAAApB,OAAA8E,EAAAG,KAAA9B,MAAA5B,kBAAA,EAAA,IAAA,KACA0D,KAAA9B,MAAAkD,0BAAA,EACA+B,GAAA,GAGA,UAAAnD,KAAA9B,MAAA7B,aAAAtB,OAAA8E,EAAAG,KAAA9B,MAAA3B,yBAAA,EAAA,IAAA,KACAyD,KAAA9B,MAAAmD,iCAAA,EACA8B,GAAA,GAGA,WAAAnD,KAAA9B,MAAA/B,mBAAApB,OAAA,IAAAiF,KAAA9B,MAAApC,SAAAwD,SACAU,KAAA9B,MAAA+C,0BAAA,EACAkC,GAAA,GAGA,YAAAnD,KAAA9B,MAAA/B,mBAAApB,OAAA,QAAAiF,KAAA9B,MAAA1B,qBAAAqD,EAAAG,KAAA9B,MAAAzB,SAAA,EAAA,GAAA,MACAuD,KAAA9B,MAAAoD,0BAAA,EACA6B,GAAA,GAGA,WAAAnD,KAAA9B,MAAA/B,mBAAApB,OAAA,UAAAiF,KAAA9B,MAAAtB,oBAAAiD,EAAAG,KAAA9B,MAAApB,eAAA,EAAA,GAAA,MACAkD,KAAA9B,MAAAqD,gCAAA,EACA4B,GAAA,GAEAtD,EAAA3B,EAAAnC,mBAAA,EAAA,GAAA,IAAA8D,EAAA3B,EAAAlC,qBAAA,EAAA,GAAA,IAAA6D,EAAA3B,EAAAjC,qBAAA,EAAA,GAAA,KACA+D,KAAA9B,MAAAkF,2BAAA,EACAD,GAAA,GAEAnD,KAAA9B,MAAAsD,eAAA3F,cAAAwH,SAEArD,KAAA9B,MAAAsD,eAAA3F,cAAAyH,QAAA,EACAC,EAAA,kBAAAC,SAAA,YACAL,GAAA,GAEA,OAAAnD,KAAA9B,MAAA7B,aAAAtB,QACA,wBAAA0I,KAAAzD,KAAA9B,MAAAwC,kBACAV,KAAA9B,MAAAsD,eAAAd,eAAAgD,WAAA,EACA1D,KAAA9B,MAAAsD,eAAAd,eAAA4C,QAAA,EACAC,EAAA,mBAAAI,YAAA,eAAAA,YAAA,YAAAA,YAAA,yBACAH,SAAA,YAAAA,SAAA,cAAAA,SAAA,2BACAxD,KAAA9B,MAAAgD,uBAAA,EACAiC,GAAA,IAGAnD,KAAA9B,MAAAmC,iBACA,IACAyC,EAAA,GAAAxH,MAAA0E,KAAA9B,MAAAmC,kBACAuD,MAAAd,IAsBA9C,KAAA9B,MAAA2F,eAAA,sBACAV,GAAA,IAtBAD,EAAAJ,EAAAgB,UACAf,EAAA,GAAAzH,MACA0E,KAAAR,aACAlB,EAAAyE,EAAAnH,cAAA,IACAhB,EAAA,cAAAmI,EAAAvH,WAAA,EAAA,GAAA,IACAZ,EAAA,cAAAmI,EAAArH,UAAA,GAAA,IACAd,EAAA,cAAAmI,EAAAV,WAAA,GAAA,IACAzH,EAAA,cAAAmI,EAAAT,aAAA,GAAA,IACA1H,EAAA,cAAAmI,EAAAR,aAAA,GAAA,QACAS,EAAArD,EAAAoE,MAAAzF,EAAA0B,KAAA9B,MAAAkE,kBAAAtH,MACAmI,EAAAD,EAAAc,WAGAb,EAAAF,EAAAe,UAEA9D,KAAAC,wBAAAgD,GAAAC,IACAlD,KAAA9B,MAAA2F,eAAA,oCACAV,GAAA,IAQA,MAAAa,GACAhE,KAAA9B,MAAA2F,eAAA,sBACAV,GAAA,MAIAnD,MAAA9B,MAAA2F,eAAA,wBACAV,GAAA,CAQA,OALAjF,GAAAT,iBAAA0F,EACAA,GACAnD,KAAA2B,aAGAwB,GAIAnD,KAAA4B,SAAA,WACA,GAAAzB,GAAAH,KAAAE,YACA,OAAAT,GAAAU,IAKAH,KAAAiE,SAAA,WACA,GAAAC,GAAAlE,KAAA4B,WACAzB,EAAAH,KAAAE,YACA,QACApF,KAAAoD,EAAArC,cACA8B,MAAAuG,EAAAtB,WACAzC,QAAAA,IAIAH,KAAAmE,SAAA,SAAAD,GAEA,MADAlE,MAAAoE,QACAxE,EAAAsE,EAAAlE,KAAA9B,QAGA8B,KAAAqE,QAAA,SAAAvJ,GACAkF,KAAA9B,MAAArC,cAAAf,GAIAkF,KAAAoE,MAAA,WACApE,KAAAgB,cACAhB,KAAA9B,MAAAsD,gBAAAxB,KAAA9B,MAAAsD,eAAA3F,eACAmE,KAAA9B,MAAAsD,eAAA3F,cAAA6F,eAEA1B,KAAA9B,MAAAoG,eAIAtE,KAAAuE,gBAAA,WACA,MAAA5E,GAAA6E,YAIAxE,KAAAyE,0BAAA,SAAAC,GACA1E,KAAAC,uBAAAyE,GAGA1E,KAAA2E,0BAAA,WACA,MAAA3E,MAAAC,wBAGAD,KAAA4E,aAAA,SAAAF,GACAxG,EAAA2G,UAAAH,GAGA,OAAA,IAAA3E,OC5PAxF,QAAAC,OAAA,wBACA+E,QAAA,WAAA,OAAA,SAAAuF,GACA,MAAA,UAAAC,GAIA,GAUA/C,GAVA5B,EAAA2E,EAAA3E,UACAE,EAAAyE,EAAAzE,UACAC,EAAAwE,EAAAxE,SACAC,EAAAuE,EAAAvE,gBACAC,EAAAsE,EAAAtE,QAEAK,EAAAiE,EAAAjE,MACArE,EAAAsI,EAAAtI,SACAX,EAAAiJ,EAAAjJ,SACAiF,EAAAgE,EAAAhE,cACAZ,IAEA,IAAA5F,QAAAyK,OAAA5E,GACAD,EAAA8E,QAAA7E,MAGA,KACAD,EAAA8E,QAAA,GAAA3J,MAAA8E,GAEA,MAAA4D,GACAc,EAAAI,MAAA,gDAAA9E,EAAA,aAAA4D,EAAAmB,SAIA,GAAA7E,GAAA,SAAAA,EAAA,CAQA,GAPAH,EAAAiF,KAAAC,MAAA/E,EAAAgF,eACAnF,EAAAI,SAAAA,EAEAzE,GAAA,gBAAAA,KACAqE,EAAAoF,UAAAF,MAAAvJ,EAAAwJ,gBAGAxJ,GAAAvB,QAAAiL,QAAA1J,GAEA,IADAqE,EAAAoF,aACAvD,EAAA,EAAAA,EAAAlG,EAAAwD,OAAA0C,IACA7B,EAAAoF,UAAA9C,KAAA4C,MAAAvJ,EAAAkG,GAAAsD,eAgBA,IAZAG,SAAA1E,GAAA,OAAAA,IACAZ,EAAAuF,SAAA3E,GAGAD,IACAX,EAAAwF,QAAA7E,GAGArE,IACA0D,EAAAyF,WAAAnJ,GAGA+D,EACAL,EAAA0F,MAAArF,MAEA,IAAAC,EACA,GAAAlG,QAAAyK,OAAAvE,GACAN,EAAA2F,MAAArF,MAGA,KACAN,EAAA2F,MAAA,GAAAxK,MAAAmF,GAEA,MAAAuD,GACAc,EAAAI,MAAA,gDAAAzE,EAAA,aAAAuD,EAAAmB,cAOAhF,GAAAiF,KAAAC,MAAAU,MACA5F,EAAAI,SAAA,EACAJ,EAAA0F,MAAA,CAEA,OAAA,IAAAR,OAAAlF,OChFA5F,QAAAC,OAAA,wBACA+E,QAAA,UAAA,WACA,MAAA,UAAAyG,EAAAC,EAAAC,EAAA5G,GACA,GAAA6G,GAAA,GAAAC,QAAA,SAAA9G,EAAA,IACA,OAAA6G,GAAA1C,KAAAuC,GAGAC,EAAAD,GAAAA,EAAAE,GACA,GAEA,GALA,KCHA3L,QAAAC,OAAA,wBACA+E,QAAA,iBAAA,OAAA,UAAA,aAAA,eAAA,cAAA,eAAA,UAAA,SAAAuF,EAAAlK,EAAA+E,EAAA0G,EAAA7G,EAAA8G,EAAAzG,GACA,MAAA,UAAAkF,GAEA,GAAA7G,GAAA6G,EAAA7G,MACA+B,EAAA8E,EAAA9E,yBAAA,CA4JA,OA1JA/B,GAAAqI,sBAAA/G,EACAtB,EAAAsI,0BAAAF,EAEApI,EAAAoG,YAAA,WACA9E,IACAtB,EAAAuI,iBAAA9G,EAAA6E,YACAjB,EAAAmD,cAAAxI,EAAAuI,oBAAAvI,EAAAuI,iBAAA3L,QACAgK,EAAAI,MAAA,kEACAhH,EAAAuI,kBAAA3L,KAAA,qBAGAoD,EAAAkE,kBAAAuE,EAAAC,KAAA1I,EAAA2I,UAAA,SAAAb,GACA,MAAAA,GAAAlL,OAAAoD,EAAAuI,iBAAA3L,QAKAoD,EAAA4I,qBACA5I,EAAA6I,wBAGA7I,EAAA4I,mBAAA,WACA,GAAA,KAAA5I,EAAAhC,kBAAA,OAAAgC,EAAAhC,kBAAAuJ,SAAAvH,EAAAhC,iBACAgC,EAAA2F,eAAA,uCACA3F,EAAAmC,iBAAA,OAEA,IAAAR,EAAA3B,EAAAnC,mBAAA,EAAA,GAAA,IAAA8D,EAAA3B,EAAAlC,qBAAA,EAAA,GAAA,IAAA6D,EAAA3B,EAAAjC,qBAAA,EAAA,GAAA,GAIA,GAAAuD,EAAA,CACAtB,EAAAiD,gBACA,KACA,GAAA7C,GAAAJ,EAAAhC,iBAAAqC,QAAA,4BAAA,SAAAC,EAAAmC,EAAAC,EAAAC,GACA,MAAAA,GAAA,IAAAF,EAAA,IAAAC,GAEAtC,IAAA,IAAA1D,EAAA,cAAAsD,EAAAnC,mBAAA,GAAA,IAAAnB,EAAA,cAAAsD,EAAAlC,qBAAA,GAAA,IACApB,EAAA,cAAAsD,EAAAjC,qBAAA,GAAA,QACAiC,EAAAmC,iBAAAzF,EAAA,iBAAA+E,EAAAoE,MAAAzF,EAAAJ,EAAAkE,kBAAAtH,MAAA6H,eACAzE,EAAA8I,uCAAA,EACA9I,EAAAkF,2BAAA,EAEA,MAAAY,GACA9F,EAAA2F,eAAA,4CAIA3F,GAAAkF,2BAAA,EACAlF,EAAA8I,uCAAA,EACA9I,EAAAmC,iBAAAzF,EAAA,iBAAAsD,EAAAhC,iBAAA,IAAAgC,EAAAnC,mBAAA,IAAAmC,EAAAlC,qBACA,IAAAkC,EAAAjC,qBAAA,aAvBAiC,GAAAkF,2BAAA,GA4BAlF,EAAA+I,WAAA,SAAAC,GACAhJ,EAAAgJ,IAAA,GAGAhJ,EAAA6I,qBAAA,WACA7I,EAAA/B,oBAAA,KAAA+B,EAAA/B,mBAAApB,OAAA,SAAAmD,EAAA/B,mBAAApB,OACAmD,EAAA5B,kBAAA,EACA4B,EAAAiJ,uBAAA,EACAjJ,EAAAkJ,uBAAAlJ,EAAA/B,mBAAAnB,gBAGAkD,EAAAiJ,uBAAA,EACAjJ,EAAA7B,aAAA6B,EAAAjD,WAAA,IAEAiD,EAAAmJ,0BAAA,GAGAnJ,EAAAoJ,aAAA,SAAAC,GACAhE,EAAA,IAAAgE,GAAAC,SAGAtJ,EAAAuJ,oBAAA,WACA,QAAAvJ,EAAA1B,oBACA+G,EAAA,aAAAmE,QAAA,WAGAnE,EAAA,aAAAmE,QAAA,WAIAxJ,EAAAyJ,mBAAA,WACA,UAAAzJ,EAAAtB,mBACA2G,EAAA,oBAAAmE,QAAA,WAGAnE,EAAA,oBAAAmE,QAAA,WAIAxJ,EAAA0J,WAAA,SAAAC,EAAAC,GAEA,GAAA9F,GAAA9D,EAAApC,SAAAiM,QAAAD,EACA9F,IAAA,EACA9D,EAAApC,SAAAkM,OAAAhG,EAAA,GAGA9D,EAAApC,SAAA2G,KAAAqF,GAEAvE,EAAAsE,EAAAI,QAAAC,OACAhK,EAAA+C,0BAAA,GAGA/C,EAAA2F,eAAA,SAAAsE,GACAjK,EAAAsD,iBACAtD,EAAAsD,eAAAtF,mBACAgC,EAAA8I,sCAAAmB,EACAjK,EAAAsD,eAAAtF,iBAAAwH,WAAA,EACAxF,EAAAsD,eAAAtF,iBAAAoH,QAAA,GAEAC,EAAA,qBAAAI,YAAA,eAAAA,YAAA,YAAAA,YAAA,yBACAH,SAAA,YAAAA,SAAA,cAAAA,SAAA,6BAIAtF,EAAAiD,eAAA,WACAjD,EAAAsD,iBACAtD,EAAA8I,sCAAA,GACA9I,EAAAsD,eAAAtF,mBACAgC,EAAAsD,eAAAtF,iBAAAuF,aAAA,gBAAA,GACAvD,EAAAsD,eAAAtF,iBAAAwF,kBAKAxD,EAAAkK,mBAAA,WACA,GAAAlG,GAAA,GAAA5G,MACAwF,EAAAlG,EAAA,cAAAsH,EAAA1G,WAAA,EAAA,GACAsM,EAAAlN,EAAA,cAAAsH,EAAAxG,UAAA,EACAwC,GAAAwC,eAAAI,EAAA,IAAAgH,EAAA,IAAA5F,EAAAtG,cACAsC,EAAA3B,yBAAA,GAIA2B,EAAAmK,kBACAnK,EAAAmK,mBAEAnK,EAAAmK,iBAAAnK,EAAAoK,IAAA,aAAA,WACApK,EAAA2I,UAAA0B,KAAAC,MAAAC,aAAAC,OACAxK,EAAAoG,gBAGA9E,EAEAG,EAAAgJ,YAAAzK,GAGAA,EAAAoG,cAGA+B,EAAAnI,EAAA+B,OCnKA1F,QAAAC,OAAA,wBACA+E,QAAA,WAAA,cAAA,OAAA,aAAA,UAAA,SAAAC,EAAAsF,EAAAnF,EAAA/E,GACA,MAAA,UAAAsJ,EAAAhG,GAKA,QAAA+F,GAAA2E,EAAAC,GACA,GAAAC,GAAAnC,EAAAC,KAAAgC,EAAA,SAAA5C,GACA,GAAA+C,GAAA/C,EAAAgD,MAAA,KAAA,GAAA1D,aACA,OAAAyD,KAAAF,GAEA,OAAAC,GACAA,EAAAE,MAAA,KAAA,GAAA1D,cAEA,KAGA,QAAA2D,GAAAC,GACA,GAAAC,GAAAD,EAAAE,cAAAJ,MAAA,KACAxK,EAAAmI,EAAAC,KAAA1I,EAAA/C,SAAA,SAAA6K,GACA,GAAAqD,GAAA9O,QAAAiL,QAAAQ,EAAAjL,OAAAiL,EAAAjL,OAAAiL,EAAAjL,OACAuO,EAAA3C,EAAA4C,WAAAF,EAAAF,GACAK,EAAA7C,EAAA4C,WAAAJ,EAAAE,EACA,OAAA,KAAAC,EAAAhK,QAAA,IAAAkK,EAAAlK,QAEA,OAAAd,GAGA,QAAAiL,GAAAX,EAAAF,GACA,GAEAM,GAAAQ,EAAAC,EAAAzH,EAAApB,EAAAgH,EAAA8B,EAFAf,EAAAC,EAAAE,MAAA,KAAA,GAAA1D,cACAvK,EAAA+N,EAAAE,MAAA,KAAA,EA2BA,IAxBA,SAAAH,IAEA3K,EAAArC,cAAAd,GAGA,SAAA8N,IACAa,EAAA3O,EAAAqO,cACAlL,EAAA/B,mBAAAwK,EAAAC,KAAA1I,EAAArD,iBAAA,SAAA6J,GAEA,MADAxG,GAAAkJ,uBAAA1C,EAAA1J,cACA0J,EAAA3J,QAAA2O,IAEAxL,EAAA/B,oBAAA+B,EAAA/B,mBAAArB,OACA+O,EAAA,4CAGA,aAAAhB,IACAiB,SAAA/O,EAAA,KACAmD,EAAA5B,kBAAAwN,SAAA/O,EAAA,IACAmD,EAAAiJ,uBAAA,GAGA0C,EAAA,wCAGA,UAAAhB,EACA,GAAA,WAAA5E,EAAA2E,EAAA,QAGA,IAFAM,EAAAnO,EAAAiO,MAAA,KACA9K,EAAApC,YACA6N,EAAA,EAAAA,EAAAT,EAAA5J,OAAAqK,IACAhD,EAAAoD,UAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAAb,EAAAS,KACAzL,EAAApC,SAAA2G,KAAAyG,EAAAS,GAAAP,eACAlL,EAAA,UAAAgL,EAAAS,GAAArE,cAAA,SAAA,UAGAuE,EAAA,+CAIA,YAAA5F,EAAA2E,EAAA,SACA1K,EAAA1B,oBAAA,QACA0B,EAAAvB,eAAAsM,EAAAlO,GACAmD,EAAAvB,iBACAkN,EAAA,8CAIA3L,EAAAtB,mBAAA,QACAsB,EAAAnB,cAAAkM,EAAAlO,GACAmD,EAAAnB,gBACA8M,EAAA,4CAIA,gBAAAhB,IACAiB,SAAA/O,EAAA,KAAA+O,SAAA/O,EAAA,IAAA,GAAA+O,SAAA/O,EAAA,IAAA,IACAmD,EAAAzB,SAAAqN,SAAA/O,EAAA,IACAmD,EAAA8L,qBAAA,OAGAH,EAAA,uDAGA,YAAAhB,IAEAoB,GAAA,EACA,iBAAAxG,KAAA1I,KAEAA,EAAAA,EAAAwD,QAAA,iDACA,SAAAC,EAAAmC,EAAAC,EAAAC,EAAAqJ,EAAAC,EAAAC,GACA,MAAAzJ,GAAA,IAAAC,EAAA,IAAAC,EAAAqJ,EAAA,IAAAC,EAAA,IAAAC,EAAA/K,OAAA,EAAA,GAAA,OAGAG,GACA0C,EAAA,GAAA5G,MAAAP,GACA+F,EAAAlG,EAAA,cAAAsH,EAAA1G,WAAA,EAAA,GACAsM,EAAAlN,EAAA,cAAAsH,EAAAxG,UAAA,GACAwC,EAAAhC,iBAAA4E,EAAA,IAAAgH,EAAA,IAAA5F,EAAAtG,cACAsC,EAAAnC,mBAAAnB,EAAA,cAAAsH,EAAAG,WAAA,GACAnE,EAAAlC,qBAAApB,EAAA,cAAAsH,EAAAI,aAAA,GACApE,EAAAjC,qBAAArB,EAAA,cAAAsH,EAAAK,aAAA,GACArE,EAAA4I,uBAIA5I,EAAAhC,iBAAAnB,EAAAwD,QAAA,OAAA,IAAAA,QAAA,0BAAA,SAAAC,EAAAmC,EAAAC,EAAAC,GACA,MAAAD,GAAA,IAAAC,EAAA,IAAAF,IAEAiJ,EAAA7O,EAAAwD,QAAA,OAAA,IACAL,EAAAnC,mBAAAnB,EAAA,cAAAgP,EAAAvK,OAAA,EAAA,GAAA,GACAnB,EAAAlC,qBAAApB,EAAA,cAAAgP,EAAAvK,OAAA,EAAA,GAAA,GACAnB,EAAAjC,qBAAArB,EAAA,cAAAgP,EAAAvK,OAAA,EAAA,GAAA,IAEAnB,EAAA4I,sBAEA,aAAA+B,IACA,WAAA5E,EAAA2E,EAAA,SACA1K,EAAAmM,kBAAA,QACAnM,EAAAjB,iBAAA0J,EAAAC,KAAA1I,EAAAhD,YAAA,SAAA8K,GACA,MAAAA,GAAAjL,QAAA+O,SAAA/O,EAAA,MAEAmD,EAAAjB,kBAAAiB,EAAAjB,iBAAAnC,OACA+O,EAAA,+CAIA3L,EAAAxB,kBAAAiK,EAAAC,KAAA1I,EAAAhD,YAAA,SAAA8K,GACA,MAAAA,GAAAjL,QAAA+O,SAAA/O,EAAA,MAEAmD,EAAAxB,mBAAAwB,EAAAxB,kBAAA5B,OACA+O,EAAA,+CAKA,UAAAhB,IACAiB,SAAA/O,EAAA,KACAmD,EAAA7B,aAAA6B,EAAAjD,WAAA,GACAiD,EAAA3B,yBAAAuN,SAAA/O,EAAA,KAGA8O,EAAA,qCAIA,UAAAhB,IACA,iBAAApF,KAAA1I,KAEAA,EAAAA,EAAAwD,QAAA,iDACA,SAAAC,EAAAmC,EAAAC,EAAAC,EAAAqJ,EAAAC,EAAAC,GACA,MAAAzJ,GAAA,IAAAC,EAAA,IAAAC,EAAAqJ,EAAA,IAAAC,EAAA,IAAAC,EAAA/K,OAAA,EAAA,GAAA,OAGAnB,EAAA7B,aAAA6B,EAAAjD,WAAA,GACAuE,GACA0C,EAAA,GAAA5G,MAAAP,GACA+F,EAAAlG,EAAA,cAAAsH,EAAA1G,WAAA,EAAA,GACAsM,EAAAlN,EAAA,cAAAsH,EAAAxG,UAAA,GACAwC,EAAAwC,eAAAI,EAAA,IAAAgH,EAAA,IAAA5F,EAAAtG,eAGAsC,EAAAwC,eAAA3F,EAAAwD,QAAA,OAAA,IAAAA,QAAA,0BAAA,SAAAC,EAAAmC,EAAAC,EAAAC,GACA,MAAAD,GAAA,IAAAC,EAAA,IAAAF,KAKA,YAAAkI,IACA,WAAA5E,EAAA2E,EAAA,SAAA3E,EAAA2E,EAAA,UACA1K,EAAAmM,kBAAA,QACAnM,EAAAlB,iBAAA2J,EAAAC,KAAA1I,EAAA9C,OAAA,SAAA4K,GACA,MAAAA,GAAAjL,QAAA+O,SAAA/O,EAAA,MAEAmD,EAAAlB,kBAAAkB,EAAAlB,iBAAAlC,OACA+O,EAAA,iDAIA3L,EAAAoM,aAAA,QACApM,EAAArB,YAAA8J,EAAAC,KAAA1I,EAAA9C,OAAA,SAAA4K,GACA,MAAAA,GAAAjL,QAAA+O,SAAA/O,EAAA,MAEAmD,EAAArB,aAAAqB,EAAArB,YAAA/B,OACA+O,EAAA,iDAKA,eAAAhB,IACAiB,SAAA/O,EAAA,IACAmD,EAAApB,eAAAgN,SAAA/O,EAAA,IAGA8O,EAAA,kDAKA,QAAAhH,KAGA,WAAA3E,EAAA/B,mBAAArB,MAAA,IAAAoD,EAAApC,SAAAwD,SACAuK,EAAA,qDAEAI,IACAJ,EAAA,wCAvNA,GAAAjB,GAAA5G,EAAA6H,EAAA,GACAI,GAAA,CA0NA,IAAA/F,EAEA,GADA0E,EAAA1E,EAAA8E,MAAA,KACAzO,QAAAiL,QAAAoD,GAAA,CACA,IAAA5G,EAAA,EAAAA,EAAA4G,EAAAtJ,SACAmK,EAAAb,EAAA5G,GAAA4G,IACAiB,GAFA7H,KAMA6H,GACAhH,QAIAgH,GAAA,qDAIAA,GAAA,gDAKA,OAHAA,IACA/E,EAAAI,MAAA2E,GAEAA","file":"angular-ui-scheduler.min.js","sourcesContent":["angular.module('angular-ui-scheduler', [])\n    .constant('scheduler_partial', '/lib/')\n    .constant('useTimezone', false)\n    .constant('showUTCField', false);","/**\n * @ngdoc controller\n * @name angular-ui-scheduler:angularUiSchedulerCtrl\n *\n * @description\n *\n *\n * @requires $scope\n * */\nangular.module('angular-ui-scheduler')\n    .controller('angularUiSchedulerCtrl', [\"$scope\", \"$filter\", function($scope, $filter){\n\n        //region defaults\n        $scope.frequencyOptions = [\n            {name: 'None (run once)', value: 'none', intervalLabel: ''},\n            {name: 'Minute', value: 'minutely', intervalLabel: 'minutes'},\n            {name: 'Hour', value: 'hourly', intervalLabel: 'hours'},\n            {name: 'Day', value: 'daily', intervalLabel: 'days'},\n            {name: 'Week', value: 'weekly', intervalLabel: 'weeks'},\n            {name: 'Month', value: 'monthly', intervalLabel: 'months'},\n            {name: 'Year', value: 'yearly', intervalLabel: 'years'}\n        ];\n\n        $scope.endOptions = [\n            {name: 'Never', value: 'never'},\n            {name: 'After', value: 'after'},\n            {name: 'On Date', value: 'on'}\n        ];\n\n        $scope.occurrences = [\n            {name: 'first', value: 1},\n            {name: 'second', value: 2},\n            {name: 'third', value: 3},\n            {name: 'fourth', value: 4},\n            {name: 'last', value: -1}\n        ];\n\n        $scope.weekdays = [\n            {name: 'Sunday', value: 'su'},\n            {name: 'Monday', value: 'mo'},\n            {name: 'Tueday', value: 'tu'},\n            {name: 'Wednesday', value: 'we'},\n            {name: 'Thursday', value: 'th'},\n            {name: 'Friday', value: 'fr'},\n            {name: 'Saturday', value: 'sa'},\n            {name: 'Day', value: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']},\n            {name: 'Weekday', value: ['mo', 'tu', 'we', 'th', 'fr']},\n            {name: 'Weekend day', value: ['sa', 'su']}\n        ];\n\n        $scope.months = [\n            {name: 'January', value: 1},\n            {name: 'February', value: 2},\n            {name: 'March', value: 3},\n            {name: 'April', value: 4},\n            {name: 'May', value: 5},\n            {name: 'June', value: 6},\n            {name: 'July', value: 7},\n            {name: 'August', value: 8},\n            {name: 'September', value: 9},\n            {name: 'October', value: 10},\n            {name: 'November', value: 11},\n            {name: 'December', value: 12}\n        ];\n        //endregion\n\n\n        // region default values\n        var defaultDate = new Date(),\n            defaultMonth = $filter('schZeroPad')(defaultDate.getMonth() + 1, 2),\n            defaultDay = $filter('schZeroPad')(defaultDate.getDate(), 2),\n            defaultDateStr = defaultMonth + '/' + defaultDay + '/' + defaultDate.getFullYear();\n        $scope.schedulerName = '';\n        $scope.weekDays = [];\n        $scope.schedulerStartHour = '00';\n        $scope.schedulerStartMinute = '00';\n        $scope.schedulerStartSecond = '00';\n        $scope.schedulerStartDt = defaultDateStr;\n        $scope.schedulerFrequency = $scope.frequencyOptions[0];\n        $scope.schedulerShowEvery = false;\n        $scope.schedulerEnd = $scope.endOptions[0];\n        $scope.schedulerInterval = 1;\n        $scope.schedulerOccurrenceCount = 1;\n        $scope.monthlyRepeatOption = 'day';\n        $scope.monthDay = 1;\n        $scope.monthlyOccurrence = $scope.occurrences[0];\n        $scope.monthlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyRepeatOption = 'month';\n        $scope.yearlyMonth = $scope.months[0];\n        $scope.yearlyMonthDay = 1;\n        $scope.yearlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyOtherMonth = $scope.months[0];\n        $scope.yearlyOccurrence = $scope.occurrences[0];\n        $scope.weekDayMOClass = '';\n        $scope.weekDayTUClass = '';\n        $scope.weekDayWEClass = '';\n        $scope.weekDayTHClass = '';\n        $scope.weekDayFRClass = '';\n        $scope.weekDaySAClass = '';\n        $scope.weekDaySUClass = '';\n\n        //Detail view\n        $scope.schedulerIsValid = false;\n        $scope.rrule_nlp_description = '';\n        $scope.rrule = '';\n        $scope.dateChoice = 'utc';\n        $scope.occurrence_list = [];\n\n        //endregion\n}]);\n","/**\n * @ngdoc directive\n * @name angular-ui-scheduler:angularUiScheduler\n *\n * @description\n *\n *\n * @restrict A\n * */\nangular.module('angular-ui-scheduler')\n    .directive('angularUiScheduler', function () {\n        return {\n            restrict: 'E',\n            templateUrl: 'angular-ui-scheduler/src/angularUiScheduler.html',\n            controller: 'angularUiSchedulerCtrl',\n            link: function (scope, elem, attr) {\n\n            }\n        };\n});\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schDateStrFixFilter\n *\n * @description\n\n * $filter('schDateStrFix')(s)  where s is a date string in ISO format: yyyy-mm-ddTHH:MM:SS.sssZ. Returns string in format: mm/dd/yyyy HH:MM:SS UTC\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schDateStrFix', function () {\n        return function (dateStr) {\n            return dateStr.replace(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*Z/, function (match, yy, mm, dd, hh, mi, ss) {\n                return mm + '/' + dd + '/' + yy + ' ' + hh + ':' + mi + ':' + ss + ' UTC';\n            });\n        };\n    });\n\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schZeroPadFilter\n *\n * @description\n * $filter('schZeroPad')(n, pad) -- or -- {{ n | afZeroPad:pad }}\n *\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schZeroPad', function () {\n        return function (n, pad) {\n            var str = (Math.pow(10, pad) + '').replace(/^1/, '') + (n + '').trim();\n            return str.substr(str.length - pad);\n        };\n    });","/**\n * @ngdoc service\n * @name angular-ui-scheduler:CreateObjectFactory\n *\n * @description\n * Return an AngularScheduler object we can use to get the RRule result from user input, check if\n * user input is valid, reset the form, etc. All the things we need to access and manipulate the\n * scheduler widget\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('CreateObject', [\"useTimezone\", \"$filter\", \"GetRule\", \"SetDefaults\", \"$timezones\", \"SetRule\", \"InRange\", function (useTimezone, $filter, GetRule, SetDefaults, $timezones, SetRule, InRange) {\n        return function (scope, requireFutureST) {\n            var fn = function () {\n\n                this.scope = scope;\n                this.useTimezone = useTimezone;\n                this.requireFutureStartTime = requireFutureST;\n\n                // Evaluate user intput and build options for passing to rrule\n                this.getOptions = function () {\n                    var options = {};\n                    options.startDate = this.scope.schedulerUTCTime;\n                    options.frequency = this.scope.schedulerFrequency.value;\n                    options.interval = this.scope.schedulerInterval;\n                    if (this.scope.schedulerEnd.value === 'after') {\n                        options.occurrenceCount = this.scope.schedulerOccurrenceCount;\n                    }\n                    if (this.scope.schedulerEnd.value === 'on') {\n                        options.endDate = scope.schedulerEndDt.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, function (match, p1, p2, p3) {\n                                return p3 + '-' + p1 + '-' + p2;\n                            }) + 'T' + this.scope.schedulerUTCTime.replace(/\\d{2}\\/\\d{2}\\/\\d{4} /, '').replace(/ UTC/, '') + 'Z';\n                    }\n                    if (this.scope.schedulerFrequency.value === 'weekly') {\n                        options.weekDays = this.scope.weekDays;\n                    }\n                    else if (this.scope.schedulerFrequency.value === 'yearly') {\n                        if (this.scope.yearlyRepeatOption === 'month') {\n                            options.month = this.scope.yearlyMonth.value;\n                            options.monthDay = this.scope.yearlyMonthDay;\n                        }\n                        else {\n                            options.setOccurrence = this.scope.yearlyOccurrence.value;\n                            options.weekDays = this.scope.yearlyWeekDay.value;\n                            options.month = this.scope.yearlyOtherMonth.value;\n                        }\n                    }\n                    else if (this.scope.schedulerFrequency.value === 'monthly') {\n                        if (this.scope.monthlyRepeatOption === 'day') {\n                            options.monthDay = this.scope.monthDay;\n                        }\n                        else {\n                            options.setOccurrence = this.scope.monthlyOccurrence.value;\n                            options.weekDays = this.scope.monthlyWeekDay.value;\n                        }\n                    }\n                    return options;\n                };\n\n                // Clear custom field errors\n                this.clearErrors = function () {\n                    this.scope.scheduler_weekDays_error = false;\n                    this.scope.scheduler_endDt_error = false;\n                    this.scope.resetStartDate();\n                    this.scope.scheduler_endDt_error = false;\n                    this.scope.scheduler_interval_error = false;\n                    this.scope.scheduler_occurrenceCount_error = false;\n                    this.scope.scheduler_monthDay_error = false;\n                    this.scope.scheduler_yearlyMonthDay_error = false;\n\n                    if (this.scope.scheduler_form && this.scope.scheduler_form.schedulerEndDt) {\n                        this.scope.scheduler_form.schedulerEndDt.$setValidity('custom-error', true);\n                        this.scope.scheduler_form.schedulerEndDt.$setPristine();\n                        this.scope.scheduler_form.$setPristine();\n                    }\n                };\n\n                // Set values for detail page\n                this.setDetails = function () {\n                    var rrule = this.getRRule(),\n                        scope = this.scope;\n                    if (rrule) {\n                        scope.rrule_nlp_description = rrule.toText();\n                        scope.dateChoice = 'local';\n                        scope.occurrence_list = [];\n                        rrule.all(function (date, i) {\n                            var local, dt;\n                            if (i < 10) {\n                                if (useTimezone) {\n                                    dt = $timezones.align(date, scope.schedulerTimeZone.name);\n                                    local = $filter('schZeroPad')(dt.getMonth() + 1, 2) + '/' +\n                                        $filter('schZeroPad')(dt.getDate(), 2) + '/' + dt.getFullYear() + ' ' +\n                                        $filter('schZeroPad')(dt.getHours(), 2) + ':' +\n                                        $filter('schZeroPad')(dt.getMinutes(), 2) + ':' +\n                                        $filter('schZeroPad')(dt.getSeconds(), 2) + ' ' +\n                                        dt.getTimezoneAbbreviation();\n                                }\n                                else {\n                                    local = $filter('date')(date, 'MM/dd/yyyy HH:mm:ss Z');\n                                }\n                                scope.occurrence_list.push({utc: $filter('schDateStrFix')(date.toISOString()), local: local});\n                                return true;\n                            }\n                            return false;\n                        });\n                        scope.rrule_nlp_description = rrule.toText().replace(/^RRule error.*$/, 'Natural language description not available');\n                        scope.rrule = rrule.toString();\n                    }\n                };\n\n                // Check the input form for errors\n                this.isValid = function () {\n                    var startDt, now, dateStr, adjNow, timeNow, timeFuture, validity = true;\n                    this.clearErrors();\n\n                    if (this.scope.schedulerFrequency.value !== 'none' && !InRange(this.scope.schedulerInterval, 1, 999, 3)) {\n                        this.scope.scheduler_interval_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerEnd.value === 'after' && !InRange(this.scope.schedulerOccurrenceCount, 1, 999, 3)) {\n                        this.scope.scheduler_occurrenceCount_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerFrequency.value === 'weekly' && this.scope.weekDays.length === 0) {\n                        this.scope.scheduler_weekDays_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerFrequency.value === 'monthly' && this.scope.monthlyRepeatOption === 'day' && !InRange(this.scope.monthDay, 1, 31, 99)) {\n                        this.scope.scheduler_monthDay_error = true;\n                        validity = false;\n                    }\n\n                    if (this.scope.schedulerFrequency.value === 'yearly' && this.scope.yearlyRepeatOption === 'month' && !InRange(this.scope.yearlyMonthDay, 1, 31, 99)) {\n                        this.scope.scheduler_yearlyMonthDay_error = true;\n                        validity = false;\n                    }\n                    if (!(InRange(scope.schedulerStartHour, 0, 23, 2) && InRange(scope.schedulerStartMinute, 0, 59, 2) && InRange(scope.schedulerStartSecond, 0, 59, 2))) {\n                        this.scope.scheduler_startTime_error = true;\n                        validity = false;\n                    }\n                    if (!this.scope.scheduler_form.schedulerName.$valid) {\n                        // Make sure schedulerName requird error shows up\n                        this.scope.scheduler_form.schedulerName.$dirty = true;\n                        $('#schedulerName').addClass('ng-dirty');\n                        validity = false;\n                    }\n                    if (this.scope.schedulerEnd.value === 'on') {\n                        if (!/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(this.scope.schedulerEndDt)) {\n                            this.scope.scheduler_form.schedulerEndDt.$pristine = false;\n                            this.scope.scheduler_form.schedulerEndDt.$dirty = true;\n                            $('#schedulerEndDt').removeClass('ng-pristine').removeClass('ng-valid').removeClass('ng-valid-custom-error')\n                                .addClass('ng-dirty').addClass('ng-invalid').addClass('ng-invalid-custom-error');\n                            this.scope.scheduler_endDt_error = true;\n                            validity = false;\n                        }\n                    }\n                    if (this.scope.schedulerUTCTime) {\n                        try {\n                            startDt = new Date(this.scope.schedulerUTCTime);\n                            if (!isNaN(startDt)) {\n                                timeFuture = startDt.getTime();\n                                now = new Date();\n                                if (this.useTimezone) {\n                                    dateStr = now.getFullYear() + '-' +\n                                        $filter('schZeroPad')(now.getMonth() + 1, 2) + '-' +\n                                        $filter('schZeroPad')(now.getDate(), 2) + 'T' +\n                                        $filter('schZeroPad')(now.getHours(), 2) + ':' +\n                                        $filter('schZeroPad')(now.getMinutes(), 2) + ':' +\n                                        $filter('schZeroPad')(now.getSeconds(), 2) + '.000Z';\n                                    adjNow = $timezones.toUTC(dateStr, this.scope.schedulerTimeZone.name);   //Adjust to the selected TZ\n                                    timeNow = adjNow.getTime();\n                                }\n                                else {\n                                    timeNow = now.getTime();\n                                }\n                                if (this.requireFutureStartTime && timeNow >= timeFuture) {\n                                    this.scope.startDateError('Start time must be in the future');\n                                    validity = false;\n                                }\n                            }\n                            else {\n                                this.scope.startDateError('Invalid start time');\n                                validity = false;\n                            }\n                        }\n                        catch (e) {\n                            this.scope.startDateError('Invalid start time');\n                            validity = false;\n                        }\n                    }\n                    else {\n                        this.scope.startDateError('Provide a start time');\n                        validity = false;\n                    }\n\n                    scope.schedulerIsValid = validity;\n                    if (validity) {\n                        this.setDetails();\n                    }\n\n                    return validity;\n                };\n\n                // Returns an rrule object\n                this.getRRule = function () {\n                    var options = this.getOptions();\n                    return GetRule(options);\n                };\n\n                // Return object containing schedule name, string representation of rrule per iCalendar RFC,\n                // and options used to create rrule\n                this.getValue = function () {\n                    var rule = this.getRRule(),\n                        options = this.getOptions();\n                    return {\n                        name: scope.schedulerName,\n                        rrule: rule.toString(),\n                        options: options\n                    };\n                };\n\n                this.setRRule = function (rule) {\n                    this.clear();\n                    return SetRule(rule, this.scope);\n                };\n\n                this.setName = function (name) {\n                    this.scope.schedulerName = name;\n                };\n\n                // Clear the form, returning all elements to a default state\n                this.clear = function () {\n                    this.clearErrors();\n                    if (this.scope.scheduler_form && this.scope.scheduler_form.schedulerName) {\n                        this.scope.scheduler_form.schedulerName.$setPristine();\n                    }\n                    this.scope.setDefaults();\n                };\n\n                // Get the user's local timezone\n                this.getUserTimezone = function () {\n                    return $timezones.getLocal();\n                };\n\n                // futureStartTime setter/getter\n                this.setRequireFutureStartTime = function (opt) {\n                    this.requireFutureStartTime = opt;\n                };\n\n                this.getRequireFutureStartTime = function () {\n                    return this.requireFutureStartTime;\n                };\n\n                this.setShowRRule = function (opt) {\n                    scope.showRRule = opt;\n                };\n            };\n            return new fn();\n        };\n    }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:GetRule\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('GetRule',  [\"$log\", function ($log) {\n        return function (params) {\n            // Convert user inputs to an rrule. Returns rrule object using https://github.com/jkbr/rrule\n            // **list of 'valid values' found below in LoadLookupValues\n\n            var startDate = params.startDate,  // date object or string in yyyy-MM-ddTHH:mm:ss.sssZ format\n                frequency = params.frequency,  // string, optional, valid value from frequencyOptions\n                interval = params.interval,    // integer, optional\n                occurrenceCount = params.occurrenceCount,  //integer, optional\n                endDate = params.endDate,      // date object or string in yyyy-MM-dd format, optional\n                                               // ignored if occurrenceCount provided\n                month = params.month,          // integer, optional, valid value from months\n                monthDay = params.monthDay,    // integer, optional, between 1 and 31\n                weekDays = params.weekDays,     // integer, optional, valid value from weekdays\n                setOccurrence = params.setOccurrence, // integer, optional, valid value from occurrences\n                options = {}, i;\n\n            if (angular.isDate(startDate)) {\n                options.dtstart = startDate;\n            }\n            else {\n                try {\n                    options.dtstart = new Date(startDate);\n                }\n                catch (e) {\n                    $log.error('Date conversion failed. Attempted to convert ' + startDate + ' to Date. ' + e.message);\n                }\n            }\n\n            if (frequency && frequency !== 'none') {\n                options.freq = RRule[frequency.toUpperCase()];\n                options.interval = interval;\n\n                if (weekDays && typeof weekDays === 'string') {\n                    options.byweekday = RRule[weekDays.toUpperCase()];\n                }\n\n                if (weekDays && angular.isArray(weekDays)) {\n                    options.byweekday = [];\n                    for (i = 0; i < weekDays.length; i++) {\n                        options.byweekday.push(RRule[weekDays[i].toUpperCase()]);\n                    }\n                }\n\n                if (setOccurrence !== undefined && setOccurrence !== null) {\n                    options.bysetpos = setOccurrence;\n                }\n\n                if (month) {\n                    options.bymonth = month;\n                }\n\n                if (monthDay) {\n                    options.bymonthday = monthDay;\n                }\n\n                if (occurrenceCount) {\n                    options.count = occurrenceCount;\n                }\n                else if (endDate) {\n                    if (angular.isDate(endDate)) {\n                        options.until = endDate;\n                    }\n                    else {\n                        try {\n                            options.until = new Date(endDate);\n                        }\n                        catch (e) {\n                            $log.error('Date conversion failed. Attempted to convert ' + endDate + ' to Date. ' + e.message);\n                        }\n                    }\n                }\n            }\n            else {\n                // We only want to run 1x\n                options.freq = RRule.DAILY;\n                options.interval = 1;\n                options.count = 1;\n            }\n            return new RRule(options);\n        };\n    }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:InRangeFactory\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('InRange', function () {\n        return function (x, min, max, length) {\n            var rx = new RegExp('\\\\d{1,' + length + '}');\n            if (!rx.test(x)) {\n                return false;\n            }\n            if (x < min || x > max) {\n                return false;\n            }\n            return true;\n        };\n    });\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:SchedulerInit\n *\n * @description\n *\n * Initialize supporting scope variables and functions. Returns a scheduler object with getString(),\n * setString() and inject() methods.\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('SchedulerInit', [\"$log\", \"$filter\", \"$timezones\", \"CreateObject\", \"useTimezone\", \"showUTCField\", \"InRange\", function ($log, $filter, $timezones, CreateObject, useTimezone, showUTCField, InRange) {\n            return function (params) {\n\n                var scope = params.scope,\n                    requireFutureStartTime = params.requireFutureStartTime || false;\n\n                scope.schedulerShowTimeZone = useTimezone;\n                scope.schedulerShowUTCStartTime = showUTCField;\n\n                scope.setDefaults = function () {\n                    if (useTimezone) {\n                        scope.current_timezone = $timezones.getLocal();\n                        if ($.isEmptyObject(scope.current_timezone) || !scope.current_timezone.name) {\n                            $log.error('Failed to find local timezone. Defaulting to America/New_York.');\n                            scope.current_timezone = {name: 'America/New_York'};\n                        }\n                        // Set the <select> to the browser's local timezone\n                        scope.schedulerTimeZone = _.find(scope.timeZones, function (x) {\n                            return x.name === scope.current_timezone.name;\n                        });\n                    }\n                    //LoadLookupValues(scope);\n                    //SetDefaults(scope);\n                    scope.scheduleTimeChange();\n                    scope.scheduleRepeatChange();\n                };\n\n                scope.scheduleTimeChange = function () {\n                    if (scope.schedulerStartDt === '' || scope.schedulerStartDt === null || scope.schedulerStartDt === undefined) {\n                        scope.startDateError('Provide a valid start date and time');\n                        scope.schedulerUTCTime = '';\n                    }\n                    else if (!(InRange(scope.schedulerStartHour, 0, 23, 2) && InRange(scope.schedulerStartMinute, 0, 59, 2) && InRange(scope.schedulerStartSecond, 0, 59, 2))) {\n                        scope.scheduler_startTime_error = true;\n                    }\n                    else {\n                        if (useTimezone) {\n                            scope.resetStartDate();\n                            try {\n                                var dateStr = scope.schedulerStartDt.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, function (match, p1, p2, p3) {\n                                    return p3 + '-' + p1 + '-' + p2;\n                                });\n                                dateStr += 'T' + $filter('schZeroPad')(scope.schedulerStartHour, 2) + ':' + $filter('schZeroPad')(scope.schedulerStartMinute, 2) + ':' +\n                                    $filter('schZeroPad')(scope.schedulerStartSecond, 2) + '.000Z';\n                                scope.schedulerUTCTime = $filter('schDateStrFix')($timezones.toUTC(dateStr, scope.schedulerTimeZone.name).toISOString());\n                                scope.scheduler_form_schedulerStartDt_error = false;\n                                scope.scheduler_startTime_error = false;\n                            }\n                            catch (e) {\n                                scope.startDateError('Provide a valid start date and time');\n                            }\n                        }\n                        else {\n                            scope.scheduler_startTime_error = false;\n                            scope.scheduler_form_schedulerStartDt_error = false;\n                            scope.schedulerUTCTime = $filter('schDateStrFix')(scope.schedulerStartDt + 'T' + scope.schedulerStartHour + ':' + scope.schedulerStartMinute +\n                                ':' + scope.schedulerStartSecond + '.000Z');\n                        }\n                    }\n                };\n\n                scope.resetError = function (variable) {\n                    scope[variable] = false;\n                };\n\n                scope.scheduleRepeatChange = function () {\n                    if (scope.schedulerFrequency && scope.schedulerFrequency.value !== '' && scope.schedulerFrequency.value !== 'none') {\n                        scope.schedulerInterval = 1;\n                        scope.schedulerShowInterval = true;\n                        scope.schedulerIntervalLabel = scope.schedulerFrequency.intervalLabel;\n                    }\n                    else {\n                        scope.schedulerShowInterval = false;\n                        scope.schedulerEnd = scope.endOptions[0];\n                    }\n                    scope.sheduler_frequency_error = false;\n                };\n\n                scope.showCalendar = function (fld) {\n                    $('#' + fld).focus();\n                };\n\n                scope.monthlyRepeatChange = function () {\n                    if (scope.monthlyRepeatOption !== 'day') {\n                        $('#monthDay').spinner('disable');\n                    }\n                    else {\n                        $('#monthDay').spinner('enable');\n                    }\n                };\n\n                scope.yearlyRepeatChange = function () {\n                    if (scope.yearlyRepeatOption !== 'month') {\n                        $('#yearlyRepeatDay').spinner('disable');\n                    }\n                    else {\n                        $('#yearlyRepeatDay').spinner('enable');\n                    }\n                };\n\n                scope.setWeekday = function (event, day) {\n                    // Add or remove day when user clicks checkbox button\n                    var i = scope.weekDays.indexOf(day);\n                    if (i >= 0) {\n                        scope.weekDays.splice(i, 1);\n                    }\n                    else {\n                        scope.weekDays.push(day);\n                    }\n                    $(event.target).blur();\n                    scope.scheduler_weekDays_error = false;\n                };\n\n                scope.startDateError = function (msg) {\n                    if (scope.scheduler_form) {\n                        if (scope.scheduler_form.schedulerStartDt) {\n                            scope.scheduler_form_schedulerStartDt_error = msg;\n                            scope.scheduler_form.schedulerStartDt.$pristine = false;\n                            scope.scheduler_form.schedulerStartDt.$dirty = true;\n                        }\n                        $('#schedulerStartDt').removeClass('ng-pristine').removeClass('ng-valid').removeClass('ng-valid-custom-error')\n                            .addClass('ng-dirty').addClass('ng-invalid').addClass('ng-invalid-custom-error');\n                    }\n                };\n\n                scope.resetStartDate = function () {\n                    if (scope.scheduler_form) {\n                        scope.scheduler_form_schedulerStartDt_error = '';\n                        if (scope.scheduler_form.schedulerStartDt) {\n                            scope.scheduler_form.schedulerStartDt.$setValidity('custom-error', true);\n                            scope.scheduler_form.schedulerStartDt.$setPristine();\n                        }\n                    }\n                };\n\n                scope.schedulerEndChange = function () {\n                    var dt = new Date(), // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2),\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                    scope.schedulerEndDt = month + '/' + day + '/' + dt.getFullYear();\n                    scope.schedulerOccurrenceCount = 1;\n                };\n\n                // When timezones become available, use to set defaults\n                if (scope.removeZonesReady) {\n                    scope.removeZonesReady();\n                }\n                scope.removeZonesReady = scope.$on('zonesReady', function () {\n                    scope.timeZones = JSON.parse(localStorage.zones);\n                    scope.setDefaults();\n                });\n\n                if (useTimezone) {\n                    // Build list of timezone <select> element options\n                    $timezones.getZoneList(scope);\n                }\n                else {\n                    scope.setDefaults();\n                }\n\n                return CreateObject(scope, requireFutureStartTime);\n\n            };\n        }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:SetRule\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('SetRule', [\"useTimezone\", \"$log\", \"$timezones\", \"$filter\", function (useTimezone, $log, $timezones, $filter) {\n        return function (rule, scope) {\n            var set, result = '', i,\n                setStartDate = false;\n\n            // Search the set of RRule keys for a particular key, returning its value\n            function getValue(set, key) {\n                var pair = _.find(set, function (x) {\n                    var k = x.split(/=/)[0].toUpperCase();\n                    return (k === key);\n                });\n                if (pair) {\n                    return pair.split(/=/)[1].toUpperCase();\n                }\n                return null;\n            }\n\n            function toWeekDays(days) {\n                var darray = days.toLowerCase().split(/,/),\n                    match = _.find(scope.weekdays, function (x) {\n                        var warray = (angular.isArray(x.value)) ? x.value : [x.value],\n                            diffA = _.difference(warray, darray),\n                            diffB = _.difference(darray, warray);\n                        return (diffA.length === 0 && diffB.length === 0);\n                    });\n                return match;\n            }\n\n            function setValue(pair, set) {\n                var key = pair.split(/=/)[0].toUpperCase(),\n                    value = pair.split(/=/)[1],\n                    days, l, j, dt, month, day, timeString;\n\n                if (key === 'NAME') {\n                    //name is not actually part of RRule, but we can handle it just the same\n                    scope.schedulerName = value;\n                }\n\n                if (key === 'FREQ') {\n                    l = value.toLowerCase();\n                    scope.schedulerFrequency = _.find(scope.frequencyOptions, function (opt) {\n                        scope.schedulerIntervalLabel = opt.intervalLabel;\n                        return opt.value === l;\n                    });\n                    if (!scope.schedulerFrequency || !scope.schedulerFrequency.name) {\n                        result = 'FREQ not found in list of valid options';\n                    }\n                }\n                if (key === 'INTERVAL') {\n                    if (parseInt(value, 10)) {\n                        scope.schedulerInterval = parseInt(value, 10);\n                        scope.schedulerShowInterval = true;\n                    }\n                    else {\n                        result = 'INTERVAL must contain an integer > 0';\n                    }\n                }\n                if (key === 'BYDAY') {\n                    if (getValue(set, 'FREQ') === 'WEEKLY') {\n                        days = value.split(/,/);\n                        scope.weekDays = [];\n                        for (j = 0; j < days.length; j++) {\n                            if (_.contains(['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'], days[j])) {\n                                scope.weekDays.push(days[j].toLowerCase());\n                                scope['weekDay' + days[j].toUpperCase() + 'Class'] = 'active'; //activate related button\n                            }\n                            else {\n                                result = 'BYDAY contains unrecognized day value(s)';\n                            }\n                        }\n                    }\n                    else if (getValue(set, 'FREQ') === 'MONTHLY') {\n                        scope.monthlyRepeatOption = 'other';\n                        scope.monthlyWeekDay = toWeekDays(value);\n                        if (!scope.monthlyWeekDay) {\n                            result = 'BYDAY contains unrecognized day value(s)';\n                        }\n                    }\n                    else {\n                        scope.yearlyRepeatOption = 'other';\n                        scope.yearlyWeekDay = toWeekDays(value);\n                        if (!scope.yearlyWeekDay) {\n                            result = 'BYDAY contains unrecognized day value(s)';\n                        }\n                    }\n                }\n                if (key === 'BYMONTHDAY') {\n                    if (parseInt(value, 10) && parseInt(value, 10) > 0 && parseInt(value, 10) < 32) {\n                        scope.monthDay = parseInt(value, 10);\n                        scope.monhthlyRepeatOption = 'day';\n                    }\n                    else {\n                        result = 'BYMONTHDAY must contain an integer between 1 and 31';\n                    }\n                }\n                if (key === 'DTSTART') {\n                    // The form has been reset to the local zone\n                    setStartDate = true;\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    if (useTimezone) {\n                        dt = new Date(value); // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2);\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                        scope.schedulerStartDt = month + '/' + day + '/' + dt.getFullYear();\n                        scope.schedulerStartHour = $filter('schZeroPad')(dt.getHours(), 2);\n                        scope.schedulerStartMinute = $filter('schZeroPad')(dt.getMinutes(), 2);\n                        scope.schedulerStartSecond = $filter('schZeroPad')(dt.getSeconds(), 2);\n                        scope.scheduleTimeChange();  // calc UTC\n                    }\n                    else {\n                        // expects inbound dates to be in ISO format: 2014-04-02T00:00:00.000Z\n                        scope.schedulerStartDt = value.replace(/T.*$/, '').replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1, p2, p3) {\n                            return p2 + '/' + p3 + '/' + p1;\n                        });\n                        timeString = value.replace(/^.*T/, '');\n                        scope.schedulerStartHour = $filter('schZeroPad')(timeString.substr(0, 2), 2);\n                        scope.schedulerStartMinute = $filter('schZeroPad')(timeString.substr(3, 2), 2);\n                        scope.schedulerStartSecond = $filter('schZeroPad')(timeString.substr(6, 2), 2);\n                    }\n                    scope.scheduleTimeChange();\n                }\n                if (key === 'BYSETPOS') {\n                    if (getValue(set, 'FREQ') === 'YEARLY') {\n                        scope.yearlRepeatOption = 'other';\n                        scope.yearlyOccurrence = _.find(scope.occurrences, function (x) {\n                            return (x.value === parseInt(value, 10));\n                        });\n                        if (!scope.yearlyOccurrence || !scope.yearlyOccurrence.name) {\n                            result = 'BYSETPOS was not in the set of 1,2,3,4,-1';\n                        }\n                    }\n                    else {\n                        scope.monthlyOccurrence = _.find(scope.occurrences, function (x) {\n                            return (x.value === parseInt(value, 10));\n                        });\n                        if (!scope.monthlyOccurrence || !scope.monthlyOccurrence.name) {\n                            result = 'BYSETPOS was not in the set of 1,2,3,4,-1';\n                        }\n                    }\n                }\n\n                if (key === 'COUNT') {\n                    if (parseInt(value, 10)) {\n                        scope.schedulerEnd = scope.endOptions[1];\n                        scope.schedulerOccurrenceCount = parseInt(value, 10);\n                    }\n                    else {\n                        result = 'COUNT must be a valid integer > 0';\n                    }\n                }\n\n                if (key === 'UNTIL') {\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    scope.schedulerEnd = scope.endOptions[2];\n                    if (useTimezone) {\n                        dt = new Date(value); // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2);\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                        scope.schedulerEndDt = month + '/' + day + '/' + dt.getFullYear();\n                    }\n                    else {\n                        scope.schedulerEndDt = value.replace(/T.*$/, '').replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1, p2, p3) {\n                            return p2 + '/' + p3 + '/' + p1;\n                        });\n                    }\n                }\n\n                if (key === 'BYMONTH') {\n                    if (getValue(set, 'FREQ') === 'YEARLY' && getValue(set, 'BYDAY')) {\n                        scope.yearlRepeatOption = 'other';\n                        scope.yearlyOtherMonth = _.find(scope.months, function (x) {\n                            return x.value === parseInt(value, 10);\n                        });\n                        if (!scope.yearlyOtherMonth || !scope.yearlyOtherMonth.name) {\n                            result = 'BYMONTH must be an integer between 1 and 12';\n                        }\n                    }\n                    else {\n                        scope.yearlyOption = 'month';\n                        scope.yearlyMonth = _.find(scope.months, function (x) {\n                            return x.value === parseInt(value, 10);\n                        });\n                        if (!scope.yearlyMonth || !scope.yearlyMonth.name) {\n                            result = 'BYMONTH must be an integer between 1 and 12';\n                        }\n                    }\n                }\n\n                if (key === 'BYMONTHDAY') {\n                    if (parseInt(value, 10)) {\n                        scope.yearlyMonthDay = parseInt(value, 10);\n                    }\n                    else {\n                        result = 'BYMONTHDAY must be an integer between 1 and 31';\n                    }\n                }\n            }\n\n            function isValid() {\n                // Check what was put into scope vars, and see if anything is\n                // missing or not quite right.\n                if (scope.schedulerFrequency.name === 'weekly' && scope.weekDays.length === 0) {\n                    result = 'Frequency is weekly, but BYDAYS value is missing.';\n                }\n                if (!setStartDate) {\n                    result = 'Warning: start date was not provided';\n                }\n            }\n\n            if (rule) {\n                set = rule.split(/;/);\n                if (angular.isArray(set)) {\n                    for (i = 0; i < set.length; i++) {\n                        setValue(set[i], set);\n                        if (result) {\n                            break;\n                        }\n                    }\n                    if (!result) {\n                        isValid();\n                    }\n                }\n                else {\n                    result = 'No rule entered. Provide a valid RRule string.';\n                }\n            }\n            else {\n                result = 'No rule entered. Provide a valid RRule string.';\n            }\n            if (result) {\n                $log.error(result);\n            }\n            return result;\n        };\n    }]);"],"sourceRoot":"/source/"}