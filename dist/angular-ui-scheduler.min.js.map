{"version":3,"sources":["app.js","angularUiSchedulerCtrl.js","angularUiSchedulerDirective.js","filters/schZeroPadFilter.js","services/rRuleHelper.js"],"names":["angular","module","constant","name","value","intervalLabel","controller","$scope","$filter","$log","rRuleHelper","angular_ui_scheduler_useTimezone","angular_ui_scheduler_hideStart","angular_ui_scheduler_frequencyOptions","angular_ui_scheduler_endOptions","angular_ui_scheduler_occurrences","angular_ui_scheduler_weekdays","angular_ui_scheduler_months","CreateSchedulerObject","scope","requireFutureST","this","useTimezone","requireFutureStartTime","clearErrors","scheduler_weekDays_error","scheduler_endDt_error","resetStartDate","scheduler_interval_error","scheduler_occurrenceCount_error","scheduler_monthDay_error","scheduler_yearlyMonthDay_error","setDetails","getRRule","getRule","getValue","options","getOptions","rrule","toString","setRRule","rule","clear","setRule","setDefaults","setRequireFutureStartTime","opt","getRequireFutureStartTime","setShowRRule","showRRule","init","params","schedulerShowTimeZone","scheduleTimeChange","scheduleRepeatChange","schedulerUTCTime","moment","tz","schedulerTimeZone","scheduler_form_schedulerStartDt_error","scheduler_startTime_error","e","startDateError","resetError","variable","schedulerFrequency","schedulerInterval","schedulerShowInterval","schedulerIntervalLabel","schedulerEnd","endOptions","sheduler_frequency_error","setWeekday","event","day","i","weekDays","indexOf","splice","push","$","target","blur","msg","schedulerEndChange","schedulerOccurrenceCount","timeZones","names","hideStart","frequencyOptions","occurrences","weekdays","months","schedulerStartHour","arguments","length","hours","toDate","getHours","schedulerStartMinute","minutes","getMinutes","schedulerStartSecond","seconds","getSeconds","schedulerShowEvery","monthlyRepeatOption","monthDay","monthlyOccurrence","monthlyWeekDay","yearlyRepeatOption","yearlyMonth","yearlyMonthDay","yearlyWeekDay","yearlyOtherMonth","yearlyOccurrence","schedulerIsValid","rrule_nlp_description","dateChoice","occurrence_list","scheduler","directive","restrict","templateUrl","link","elem","attr","filter","n","pad","str","Math","pow","replace","trim","substr","factory","startDate","frequency","interval","occurrenceCount","endDate","add","month","setOccurrence","isDate","dtstart","Date","error","message","freq","RRule","toUpperCase","byweekday","isArray","undefined","bysetpos","bymonth","bymonthday","count","until","DAILY","set","key","pair","_","find","x","k","split","toWeekDays","days","darray","toLowerCase","match","warray","diffA","difference","diffB","normalizeDate","test","p1","p2","p3","p4","p5","p6","setValue","l","j","parseInt","contains","monhthlyRepeatOption","schedulerStartDt","yearlRepeatOption","schedulerEndDt","yearlyOption","validate","tokens"],"mappings":"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","file":"angular-ui-scheduler.min.js","sourcesContent":["angular.module('angular-ui-scheduler', [])\n    .constant('angular_ui_scheduler_hideStart', true)\n    .constant('angular_ui_scheduler_useTimezone', false);","/**\n * @ngdoc controller\n * @name angular-ui-scheduler:angularUiSchedulerCtrl\n *\n * @description\n *\n *\n * @requires $scope\n * */\nangular.module('angular-ui-scheduler')\n    .constant('angular_ui_scheduler_frequencyOptions', [\n        {name: 'None (run once)', value: 'none', intervalLabel: ''},\n        {name: 'Minute', value: 'minutely', intervalLabel: 'minute(s)'},\n        {name: 'Hour', value: 'hourly', intervalLabel: 'hour(s)'},\n        {name: 'Day', value: 'daily', intervalLabel: 'day(s)'},\n        {name: 'Week', value: 'weekly', intervalLabel: 'week(s)'},\n        {name: 'Month', value: 'monthly', intervalLabel: 'month(s)'},\n        {name: 'Year', value: 'yearly', intervalLabel: 'year(s)'}\n    ])\n    .constant('angular_ui_scheduler_endOptions', [\n        {name: 'Never', value: 'never'},\n        {name: 'After', value: 'after'},\n        {name: 'On Date', value: 'on'}\n    ])\n    .constant('angular_ui_scheduler_occurrences', [\n        {name: 'first', value: 1},\n        {name: 'second', value: 2},\n        {name: 'third', value: 3},\n        {name: 'fourth', value: 4},\n        {name: 'last', value: -1}\n    ])\n    .constant('angular_ui_scheduler_weekdays', [\n        {name: 'Sunday', value: 'su'},\n        {name: 'Monday', value: 'mo'},\n        {name: 'Tuesday', value: 'tu'},\n        {name: 'Wednesday', value: 'we'},\n        {name: 'Thursday', value: 'th'},\n        {name: 'Friday', value: 'fr'},\n        {name: 'Saturday', value: 'sa'},\n        {name: 'Day', value: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']},\n        {name: 'Weekday', value: ['mo', 'tu', 'we', 'th', 'fr']},\n        {name: 'Weekend day', value: ['sa', 'su']}\n    ])\n    .constant('angular_ui_scheduler_months', [\n        {name: 'January', value: 1},\n        {name: 'February', value: 2},\n        {name: 'March', value: 3},\n        {name: 'April', value: 4},\n        {name: 'May', value: 5},\n        {name: 'June', value: 6},\n        {name: 'July', value: 7},\n        {name: 'August', value: 8},\n        {name: 'September', value: 9},\n        {name: 'October', value: 10},\n        {name: 'November', value: 11},\n        {name: 'December', value: 12}\n    ])\n    .controller('angularUiSchedulerCtrl', [\"$scope\", \"$filter\", \"$log\", \"rRuleHelper\", \"angular_ui_scheduler_useTimezone\", \"angular_ui_scheduler_hideStart\", \"angular_ui_scheduler_frequencyOptions\", \"angular_ui_scheduler_endOptions\", \"angular_ui_scheduler_occurrences\", \"angular_ui_scheduler_weekdays\", \"angular_ui_scheduler_months\", function ($scope, $filter, $log, rRuleHelper,\n                                                    angular_ui_scheduler_useTimezone,\n                                                    angular_ui_scheduler_hideStart,\n                                                    angular_ui_scheduler_frequencyOptions,\n                                                    angular_ui_scheduler_endOptions,\n                                                    angular_ui_scheduler_occurrences,\n                                                    angular_ui_scheduler_weekdays,\n                                                    angular_ui_scheduler_months) {\n\n\n        $scope.hideStart = angular_ui_scheduler_hideStart;\n\n        //region defaults\n        $scope.frequencyOptions = angular_ui_scheduler_frequencyOptions;\n\n        $scope.endOptions = angular_ui_scheduler_endOptions;\n\n        $scope.occurrences = angular_ui_scheduler_occurrences;\n\n        $scope.weekdays = angular_ui_scheduler_weekdays;\n\n        $scope.months = angular_ui_scheduler_months;\n        //endregion\n\n\n        // region default values\n\n        $scope.weekDays = [];\n        $scope.schedulerStartHour = function (value) {\n            if (arguments.length) {\n                $scope.schedulerUTCTime = moment($scope.schedulerUTCTime).hours(value).toDate();\n            } else {\n                return $scope.schedulerUTCTime.getHours();\n            }\n        };\n        $scope.schedulerStartMinute = function (value) {\n            if (arguments.length) {\n                $scope.schedulerUTCTime = moment($scope.schedulerUTCTime).minutes(value).toDate();\n            } else {\n                return $scope.schedulerUTCTime.getMinutes();\n            }\n        };\n        $scope.schedulerStartSecond = function (value) {\n            if (arguments.length) {\n                $scope.schedulerUTCTime = moment($scope.schedulerUTCTime).seconds(value).toDate();\n            } else {\n                return $scope.schedulerUTCTime.getSeconds();\n            }\n        };\n        $scope.schedulerUTCTime = moment().toDate();\n        $scope.schedulerFrequency = $scope.frequencyOptions[0];\n        $scope.schedulerShowEvery = false;\n        $scope.schedulerEnd = $scope.endOptions[0];\n        $scope.schedulerInterval = 1;\n        $scope.schedulerOccurrenceCount = 1;\n        $scope.monthlyRepeatOption = 'day';\n        $scope.monthDay = 1;\n        $scope.monthlyOccurrence = $scope.occurrences[0];\n        $scope.monthlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyRepeatOption = 'month';\n        $scope.yearlyMonth = $scope.months[0];\n        $scope.yearlyMonthDay = 1;\n        $scope.yearlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyOtherMonth = $scope.months[0];\n        $scope.yearlyOccurrence = $scope.occurrences[0];\n\n        //Detail view\n        $scope.schedulerIsValid = false;\n        $scope.rrule_nlp_description = '';\n        $scope.rrule = '';\n        $scope.dateChoice = 'utc';\n        $scope.occurrence_list = [];\n\n        //endregion\n\n\n        function CreateSchedulerObject(scope, requireFutureST) {\n            this.scope = scope;\n            this.useTimezone = angular_ui_scheduler_useTimezone;\n            this.requireFutureStartTime = requireFutureST;\n\n            // Clear custom field errors\n            this.clearErrors = function () {\n                this.scope.scheduler_weekDays_error = false;\n                this.scope.scheduler_endDt_error = false;\n                this.scope.resetStartDate();\n                this.scope.scheduler_endDt_error = false;\n                this.scope.scheduler_interval_error = false;\n                this.scope.scheduler_occurrenceCount_error = false;\n                this.scope.scheduler_monthDay_error = false;\n                this.scope.scheduler_yearlyMonthDay_error = false;\n            };\n\n            // Set values for detail page\n            this.setDetails = function () {\n                //var rrule = this.getRRule(),\n                //    scope = this.scope;\n                //if (rrule) {\n                //    scope.rrule_nlp_description = rrule.toText();\n                //    scope.dateChoice = 'local';\n                //    scope.occurrence_list = [];\n                //    rrule.all(function (date, i) {\n                //        var local, dt;\n                //        if (i < 10) {\n                //            if (angular_ui_scheduler_useTimezone) {\n                //                dt = $timezones.align(date, scope.schedulerTimeZone);\n                //                local = $filter('schZeroPad')(dt.getMonth() + 1, 2) + '/' +\n                //                    $filter('schZeroPad')(dt.getDate(), 2) + '/' + dt.getFullYear() + ' ' +\n                //                    $filter('schZeroPad')(dt.getHours(), 2) + ':' +\n                //                    $filter('schZeroPad')(dt.getMinutes(), 2) + ':' +\n                //                    $filter('schZeroPad')(dt.getSeconds(), 2) + ' ' +\n                //                    dt.getTimezoneAbbreviation();\n                //            }\n                //            else {\n                //                local = $filter('date')(date, 'MM/dd/yyyy HH:mm:ss Z');\n                //            }\n                //            scope.occurrence_list.push({utc: $filter('schDateStrFix')(date.toISOString()), local: local});\n                //            return true;\n                //        }\n                //        return false;\n                //    });\n                //    scope.rrule_nlp_description = rrule.toText().replace(/^RRule error.*$/, 'Natural language description not available');\n                //    scope.rrule = rrule.toString();\n                //}\n            };\n\n            // Returns an rrule object\n            this.getRRule = function () {\n                return rRuleHelper.getRule(this.scope);\n            };\n\n            // Return object containing schedule name, string representation of rrule per iCalendar RFC,\n            // and options used to create rrule\n            this.getValue = function () {\n                var rule = this.getRRule(),\n                    options = rRuleHelper.getOptions(this.scope);\n                return {\n                    rrule: this.getRRule().toString(),\n                    options: options\n                };\n            };\n\n            this.setRRule = function (rule) {\n                this.clear();\n                return rRuleHelper.setRule(rule, this.scope);\n            };\n\n            // Clear the form, returning all elements to a default state\n            this.clear = function () {\n                this.clearErrors();\n                this.scope.setDefaults();\n            };\n\n            // futureStartTime setter/getter\n            this.setRequireFutureStartTime = function (opt) {\n                this.requireFutureStartTime = opt;\n            };\n\n            this.getRequireFutureStartTime = function () {\n                return this.requireFutureStartTime;\n            };\n\n            this.setShowRRule = function (opt) {\n                scope.showRRule = opt;\n            };\n        }\n\n        function init(params) {\n\n            var scope = params.scope,\n                requireFutureStartTime = params.requireFutureStartTime || false;\n\n            scope.schedulerShowTimeZone = angular_ui_scheduler_useTimezone;\n\n            scope.setDefaults = function () {\n                //if (angular_ui_scheduler_useTimezone) {\n                //    scope.current_timezone = `.getLocal();\n                //    if ($.isEmptyObject(scope.current_timezone) || !scope.current_timezone.name) {\n                //        $log.error('Failed to find local timezone. Defaulting to America/New_York.');\n                //        scope.current_timezone = {name: 'America/New_York'};\n                //    }\n                //    // Set the <select> to the browser's local timezone\n                //    scope.schedulerTimeZone = _.find(scope.timeZones, function (x) {\n                //        return x.name === scope.current_timezone.name;\n                //    });\n                //}\n                //LoadLookupValues(scope);\n                //SetDefaults(scope);\n                scope.scheduleTimeChange();\n                scope.scheduleRepeatChange();\n            };\n\n            scope.scheduleTimeChange = function () {\n                if (angular_ui_scheduler_useTimezone) {\n                    scope.resetStartDate();\n                    try {\n\n                        //todo check\n                        scope.schedulerUTCTime = moment(scope.schedulerUTCTime).tz(scope.schedulerTimeZone);\n\n                        scope.scheduler_form_schedulerStartDt_error = false;\n                        scope.scheduler_startTime_error = false;\n                    }\n                    catch (e) {\n                        scope.startDateError('Provide a valid start date and time');\n                    }\n                }\n                else {\n                    scope.scheduler_startTime_error = false;\n                    scope.scheduler_form_schedulerStartDt_error = false;\n                }\n            };\n\n            scope.resetError = function (variable) {\n                scope[variable] = false;\n            };\n\n            scope.scheduleRepeatChange = function () {\n                if (scope.schedulerFrequency && scope.schedulerFrequency.value !== '' && scope.schedulerFrequency.value !== 'none') {\n                    scope.schedulerInterval = 1;\n                    scope.schedulerShowInterval = true;\n                    scope.schedulerIntervalLabel = scope.schedulerFrequency.intervalLabel;\n                }\n                else {\n                    scope.schedulerShowInterval = false;\n                    scope.schedulerEnd = scope.endOptions[0];\n                }\n                scope.sheduler_frequency_error = false;\n            };\n\n            scope.setWeekday = function (event, day) {\n                // Add or remove day when user clicks checkbox button\n                var i = scope.weekDays.indexOf(day);\n                if (i >= 0) {\n                    scope.weekDays.splice(i, 1);\n                }\n                else {\n                    scope.weekDays.push(day);\n                }\n                $(event.target).blur();\n                scope.scheduler_weekDays_error = false;\n            };\n\n            scope.startDateError = function (msg) {\n                scope.scheduler_form_schedulerStartDt_error = msg;\n            };\n\n            scope.resetStartDate = function () {\n                scope.scheduler_form_schedulerStartDt_error = '';\n            };\n\n            scope.schedulerEndChange = function () {\n                scope.schedulerOccurrenceCount = 1;\n            };\n\n            if (angular_ui_scheduler_useTimezone) {\n                scope.timeZones = moment.tz.names();\n            }\n            scope.setDefaults();\n\n            return new CreateSchedulerObject(scope, requireFutureStartTime);\n        }\n\n        $scope.scheduler = init({scope: $scope, requireFutureStartTime: false});\n    }]);\n","/**\n * @ngdoc directive\n * @name angular-ui-scheduler:angularUiScheduler\n *\n * @description\n *\n *\n * @restrict E\n * */\nangular.module('angular-ui-scheduler')\n    .directive('angularUiScheduler', function () {\n        return {\n            restrict: 'E',\n            templateUrl: 'angular-ui-scheduler/src/angularUiScheduler.html',\n            controller: 'angularUiSchedulerCtrl',\n            link: function (scope, elem, attr) {\n\n            }\n        };\n});\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schZeroPadFilter\n *\n * @description\n * $filter('schZeroPad')(n, pad) -- or -- {{ n | afZeroPad:pad }}\n *\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schZeroPad', function () {\n        return function (n, pad) {\n            var str = (Math.pow(10, pad) + '').replace(/^1/, '') + (n + '').trim();\n            return str.substr(str.length - pad);\n        };\n    });","/**\n * @ngdoc service\n * @name angular-ui-scheduler:rRuleHelper\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('rRuleHelper', [\"angular_ui_scheduler_useTimezone\", \"$log\", \"$filter\", \"angular_ui_scheduler_frequencyOptions\", \"angular_ui_scheduler_occurrences\", \"angular_ui_scheduler_endOptions\", \"angular_ui_scheduler_weekdays\", \"angular_ui_scheduler_months\", function (angular_ui_scheduler_useTimezone, $log, $filter,\n                                      angular_ui_scheduler_frequencyOptions,\n                                      angular_ui_scheduler_occurrences,\n                                      angular_ui_scheduler_endOptions,\n                                      angular_ui_scheduler_weekdays,\n                                      angular_ui_scheduler_months) {\n        return {\n\n            // Evaluate user intput and build options for passing to rrule\n            getOptions: function (scope) {\n                var options = {};\n                options.startDate = scope.schedulerUTCTime;\n                options.frequency = scope.schedulerFrequency.value;\n                options.interval = scope.schedulerInterval;\n                if (scope.schedulerEnd.value === 'after') {\n                    options.occurrenceCount = scope.schedulerOccurrenceCount;\n                }\n                if (scope.schedulerEnd.value === 'on') {\n                    options.endDate = moment(scope.schedulerUTCTime).add(1, 'd').toDate();\n                }\n                if (scope.schedulerFrequency.value === 'weekly') {\n                    options.weekDays = scope.weekDays;\n                }\n                else if (scope.schedulerFrequency.value === 'yearly') {\n                    if (scope.yearlyRepeatOption === 'month') {\n                        options.month = scope.yearlyMonth.value;\n                        options.monthDay = scope.yearlyMonthDay;\n                    }\n                    else {\n                        options.setOccurrence = scope.yearlyOccurrence.value;\n                        options.weekDays = scope.yearlyWeekDay.value;\n                        options.month = scope.yearlyOtherMonth.value;\n                    }\n                }\n                else if (scope.schedulerFrequency.value === 'monthly') {\n                    if (scope.monthlyRepeatOption === 'day') {\n                        options.monthDay = scope.monthDay;\n                    }\n                    else {\n                        options.setOccurrence = scope.monthlyOccurrence.value;\n                        options.weekDays = scope.monthlyWeekDay.value;\n                    }\n                }\n                return options;\n            },\n\n            //returns rrule based on current state of UI\n            getRule: function (scope) {\n\n                var params = this.getOptions(scope);\n                // Convert user inputs to an rrule. Returns rrule object using https://github.com/jkbr/rrule\n                // **list of 'valid values' found below in LoadLookupValues\n\n                var startDate = params.startDate,  // date object or string in yyyy-MM-ddTHH:mm:ss.sssZ format\n                    frequency = params.frequency,  // string, optional, valid value from frequencyOptions\n                    interval = params.interval,    // integer, optional\n                    occurrenceCount = params.occurrenceCount,  //integer, optional\n                    endDate = params.endDate,      // date object or string in yyyy-MM-dd format, optional\n                                                   // ignored if occurrenceCount provided\n                    month = params.month,          // integer, optional, valid value from months\n                    monthDay = params.monthDay,    // integer, optional, between 1 and 31\n                    weekDays = params.weekDays,     // integer, optional, valid value from weekdays\n                    setOccurrence = params.setOccurrence, // integer, optional, valid value from occurrences\n                    options = {}, i;\n\n                if (angular.isDate(startDate)) {\n                    options.dtstart = startDate;\n                }\n                else {\n                    try {\n                        options.dtstart = new Date(startDate);\n                    }\n                    catch (e) {\n                        $log.error('Date conversion failed. Attempted to convert ' + startDate + ' to Date. ' + e.message);\n                    }\n                }\n\n                if (frequency && frequency !== 'none') {\n                    options.freq = RRule[frequency.toUpperCase()];\n                    options.interval = interval;\n\n                    if (weekDays && typeof weekDays === 'string') {\n                        options.byweekday = RRule[weekDays.toUpperCase()];\n                    }\n\n                    if (weekDays && angular.isArray(weekDays)) {\n                        options.byweekday = [];\n                        for (i = 0; i < weekDays.length; i++) {\n                            options.byweekday.push(RRule[weekDays[i].toUpperCase()]);\n                        }\n                    }\n\n                    if (setOccurrence !== undefined && setOccurrence !== null) {\n                        options.bysetpos = setOccurrence;\n                    }\n\n                    if (month) {\n                        options.bymonth = month;\n                    }\n\n                    if (monthDay) {\n                        options.bymonthday = monthDay;\n                    }\n\n                    if (occurrenceCount) {\n                        options.count = occurrenceCount;\n                    }\n                    else if (endDate) {\n                        if (angular.isDate(endDate)) {\n                            options.until = endDate;\n                        }\n                        else {\n                            try {\n                                options.until = new Date(endDate);\n                            }\n                            catch (e) {\n                                $log.error('Date conversion failed. Attempted to convert ' + endDate + ' to Date. ' + e.message);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // We only want to run 1x\n                    options.freq = RRule.DAILY;\n                    options.interval = 1;\n                    options.count = 1;\n                }\n                return new RRule(options);\n            },\n\n            //configures UI based on rrule\n            setRule: function (rule, params) {\n                if (!rule) {\n                    throw 'No rule entered. Provide a valid RRule string.';\n                }\n\n                var tokens = rule.split(/;/);\n                if (!angular.isArray(tokens)) {\n                    throw 'No rule entered. Provide a valid RRule string.';\n                }\n\n                // Search the tokens of RRule keys for a particular key, returning its value\n                function getValue(set, key) {\n                    var pair = _.find(set, function (x) {\n                        var k = x.split(/=/)[0].toUpperCase();\n                        return (k === key);\n                    });\n                    if (pair) {\n                        return pair.split(/=/)[1].toUpperCase();\n                    }\n                    return null;\n                }\n\n                function toWeekDays(days) {\n                    var darray = days.toLowerCase().split(/,/),\n                        match = _.find(angular_ui_scheduler_weekdays, function (x) {\n                            var warray = (angular.isArray(x.value)) ? x.value : [x.value],\n                                diffA = _.difference(warray, darray),\n                                diffB = _.difference(darray, warray);\n                            return (diffA.length === 0 && diffB.length === 0);\n                        });\n                    return match;\n                }\n\n                function normalizeDate(value) {\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    return value;\n                }\n\n                function setValue(pair, set) {\n                    var key = pair.split(/=/)[0].toUpperCase(),\n                        value = pair.split(/=/)[1],\n                        days, l, j, dt, month, day, timeString;\n\n                    if (key === 'FREQ') {\n                        l = value.toLowerCase();\n                        params.schedulerFrequency = _.find(angular_ui_scheduler_frequencyOptions, function (opt) {\n                            params.schedulerIntervalLabel = opt.intervalLabel;\n                            return opt.value === l;\n                        });\n                        if (!params.schedulerFrequency || !params.schedulerFrequency.name) {\n                            throw 'FREQ not found in list of valid options';\n                        }\n                    }\n                    if (key === 'INTERVAL') {\n                        if (parseInt(value, 10)) {\n                            params.schedulerInterval = parseInt(value, 10);\n                            params.schedulerShowInterval = true;\n                        }\n                        else {\n                            throw 'INTERVAL must contain an integer > 0';\n                        }\n                    }\n                    if (key === 'BYDAY') {\n                        if (getValue(set, 'FREQ') === 'WEEKLY') {\n                            days = value.split(/,/);\n                            params.weekDays = [];\n                            for (j = 0; j < days.length; j++) {\n                                if (_.contains(['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'], days[j])) {\n                                    params.weekDays.push(days[j].toLowerCase());\n                                    params['weekDay' + days[j].toUpperCase() + 'Class'] = 'active'; //activate related button\n                                }\n                                else {\n                                    throw 'BYDAY contains unrecognized day value(s)';\n                                }\n                            }\n                        }\n                        else if (getValue(set, 'FREQ') === 'MONTHLY') {\n                            params.monthlyRepeatOption = 'other';\n                            params.monthlyWeekDay = toWeekDays(value);\n                            if (!params.monthlyWeekDay) {\n                                throw 'BYDAY contains unrecognized day value(s)';\n                            }\n                        }\n                        else {\n                            params.yearlyRepeatOption = 'other';\n                            params.yearlyWeekDay = toWeekDays(value);\n                            if (!params.yearlyWeekDay) {\n                                throw 'BYDAY contains unrecognized day value(s)';\n                            }\n                        }\n                    }\n                    if (key === 'BYMONTHDAY') {\n                        if (parseInt(value, 10) && parseInt(value, 10) > 0 && parseInt(value, 10) < 32) {\n                            params.monthDay = parseInt(value, 10);\n                            params.monhthlyRepeatOption = 'day';\n                        }\n                        else {\n                            throw 'BYMONTHDAY must contain an integer between 1 and 31';\n                        }\n                    }\n                    if (key === 'DTSTART') {\n                        // The form has been reset to the local zone\n                        value = normalizeDate(value);\n                        params.schedulerStartDt = new Date(value);\n                    }\n                    if (key === 'BYSETPOS') {\n                        if (getValue(set, 'FREQ') === 'YEARLY') {\n                            params.yearlRepeatOption = 'other';\n                            params.yearlyOccurrence = _.find(angular_ui_scheduler_occurrences, function (x) {\n                                return (x.value === parseInt(value, 10));\n                            });\n                            if (!params.yearlyOccurrence || !params.yearlyOccurrence.name) {\n                                throw 'BYSETPOS was not in the tokens of 1,2,3,4,-1';\n                            }\n                        }\n                        else {\n                            params.monthlyOccurrence = _.find(angular_ui_scheduler_occurrences, function (x) {\n                                return (x.value === parseInt(value, 10));\n                            });\n                            if (!params.monthlyOccurrence || !params.monthlyOccurrence.name) {\n                                throw 'BYSETPOS was not in the tokens of 1,2,3,4,-1';\n                            }\n                        }\n                    }\n\n                    if (key === 'COUNT') {\n                        if (parseInt(value, 10)) {\n                            params.schedulerEnd = angular_ui_scheduler_endOptions[1];\n                            params.schedulerOccurrenceCount = parseInt(value, 10);\n                        }\n                        else {\n                            throw 'COUNT must be a valid integer > 0';\n                        }\n                    }\n\n                    if (key === 'UNTIL') {\n                        value = normalizeDate(value);\n                        params.schedulerEnd = angular_ui_scheduler_endOptions[2];\n                        params.schedulerEndDt = new Date(value);\n                    }\n\n                    if (key === 'BYMONTH') {\n                        if (getValue(set, 'FREQ') === 'YEARLY' && getValue(set, 'BYDAY')) {\n                            params.yearlRepeatOption = 'other';\n                            params.yearlyOtherMonth = _.find(angular_ui_scheduler_months, function (x) {\n                                return x.value === parseInt(value, 10);\n                            });\n                            if (!params.yearlyOtherMonth || !params.yearlyOtherMonth.name) {\n                                throw 'BYMONTH must be an integer between 1 and 12';\n                            }\n                        }\n                        else {\n                            params.yearlyOption = 'month';\n                            params.yearlyMonth = _.find(angular_ui_scheduler_months, function (x) {\n                                return x.value === parseInt(value, 10);\n                            });\n                            if (!params.yearlyMonth || !params.yearlyMonth.name) {\n                                throw 'BYMONTH must be an integer between 1 and 12';\n                            }\n                        }\n                    }\n\n                    if (key === 'BYMONTHDAY') {\n                        if (parseInt(value, 10)) {\n                            params.yearlyMonthDay = parseInt(value, 10);\n                        }\n                        else {\n                            throw 'BYMONTHDAY must be an integer between 1 and 31';\n                        }\n                    }\n                }\n\n                function validate() {\n                    // Check what was put into params vars, and see if anything is\n                    // missing or not quite right.\n                    if (params.schedulerFrequency.name === 'weekly' && params.weekDays.length === 0) {\n                        throw 'Frequency is weekly, but BYDAYS value is missing.';\n                    }\n                    if (!params.schedulerStartDt) {\n                        throw 'Warning: start date was not provided';\n                    }\n                }\n\n                for (var i = 0; i < tokens.length; i++) {\n                    setValue(tokens[i], tokens);\n                }\n                validate();\n\n                return params;\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}