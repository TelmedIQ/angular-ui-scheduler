{"version":3,"sources":["app.js","angularUiSchedulerCtrl.js","angularUiSchedulerDirective.js","filters/schDateStrFixFilter.js","filters/schZeroPadFilter.js","services/GetRule.js","services/InRangeFactory.js","services/SetRule.js"],"names":["angular","module","constant","controller","$scope","$filter","$log","angular_ui_scheduler_useTimezone","InRange","GetRule","SetRule","CreateObject","scope","requireFutureST","fn","this","useTimezone","requireFutureStartTime","getOptions","options","startDate","schedulerUTCTime","frequency","schedulerFrequency","value","interval","schedulerInterval","schedulerEnd","occurrenceCount","schedulerOccurrenceCount","endDate","moment","add","toDate","weekDays","yearlyRepeatOption","month","yearlyMonth","monthDay","yearlyMonthDay","setOccurrence","yearlyOccurrence","yearlyWeekDay","yearlyOtherMonth","monthlyRepeatOption","monthlyOccurrence","monthlyWeekDay","clearErrors","scheduler_weekDays_error","scheduler_endDt_error","resetStartDate","scheduler_interval_error","scheduler_occurrenceCount_error","scheduler_monthDay_error","scheduler_yearlyMonthDay_error","setDetails","getRRule","getValue","rule","name","schedulerName","rrule","toString","setRRule","clear","setName","scheduler_form","$setPristine","setDefaults","setRequireFutureStartTime","opt","getRequireFutureStartTime","setShowRRule","showRRule","Init","params","schedulerShowTimeZone","scheduleTimeChange","scheduleRepeatChange","tz","schedulerTimeZone","scheduler_form_schedulerStartDt_error","scheduler_startTime_error","e","startDateError","resetError","variable","schedulerShowInterval","schedulerIntervalLabel","intervalLabel","endOptions","sheduler_frequency_error","setWeekday","event","day","i","indexOf","splice","push","$","target","blur","msg","schedulerEndChange","timeZones","names","frequencyOptions","occurrences","weekdays","months","schedulerStartHour","arguments","length","hours","getHours","schedulerStartMinute","minutes","getMinutes","schedulerStartSecond","seconds","getSeconds","schedulerShowEvery","schedulerIsValid","rrule_nlp_description","dateChoice","occurrence_list","scheduler","directive","restrict","templateUrl","link","elem","attr","filter","dateStr","replace","match","yy","mm","dd","hh","mi","ss","n","pad","str","Math","pow","trim","substr","factory","isDate","dtstart","Date","error","message","freq","RRule","toUpperCase","byweekday","isArray","undefined","bysetpos","bymonth","bymonthday","count","until","DAILY","x","min","max","rx","RegExp","test","set","key","pair","_","find","k","split","toWeekDays","days","darray","toLowerCase","warray","diffA","difference","diffB","setValue","l","j","dt","timeString","result","parseInt","contains","monhthlyRepeatOption","setStartDate","p1","p2","p3","p4","p5","p6","getMonth","getDate","schedulerStartDt","getFullYear","yearlRepeatOption","schedulerEndDt","yearlyOption","isValid"],"mappings":"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","file":"angular-ui-scheduler.min.js","sourcesContent":["angular.module('angular-ui-scheduler', [])\n    .constant('angular_ui_scheduler_useTimezone', false);","/**\n * @ngdoc controller\n * @name angular-ui-scheduler:angularUiSchedulerCtrl\n *\n * @description\n *\n *\n * @requires $scope\n * */\nangular.module('angular-ui-scheduler')\n    .controller('angularUiSchedulerCtrl', [\"$scope\", \"$filter\", \"$log\", \"angular_ui_scheduler_useTimezone\", \"InRange\", \"GetRule\", \"SetRule\", function ($scope, $filter, $log, angular_ui_scheduler_useTimezone, InRange, GetRule, SetRule) {\n\n        //region defaults\n        $scope.frequencyOptions = [\n            {name: 'None (run once)', value: 'none', intervalLabel: ''},\n            {name: 'Minute', value: 'minutely', intervalLabel: 'minute(s)'},\n            {name: 'Hour', value: 'hourly', intervalLabel: 'hour(s)'},\n            {name: 'Day', value: 'daily', intervalLabel: 'day(s)'},\n            {name: 'Week', value: 'weekly', intervalLabel: 'week(s)'},\n            {name: 'Month', value: 'monthly', intervalLabel: 'month(s)'},\n            {name: 'Year', value: 'yearly', intervalLabel: 'year(s)'}\n        ];\n\n        $scope.endOptions = [\n            {name: 'Never', value: 'never'},\n            {name: 'After', value: 'after'},\n            {name: 'On Date', value: 'on'}\n        ];\n\n        $scope.occurrences = [\n            {name: 'first', value: 1},\n            {name: 'second', value: 2},\n            {name: 'third', value: 3},\n            {name: 'fourth', value: 4},\n            {name: 'last', value: -1}\n        ];\n\n        $scope.weekdays = [\n            {name: 'Sunday', value: 'su'},\n            {name: 'Monday', value: 'mo'},\n            {name: 'Tuesday', value: 'tu'},\n            {name: 'Wednesday', value: 'we'},\n            {name: 'Thursday', value: 'th'},\n            {name: 'Friday', value: 'fr'},\n            {name: 'Saturday', value: 'sa'},\n            {name: 'Day', value: ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']},\n            {name: 'Weekday', value: ['mo', 'tu', 'we', 'th', 'fr']},\n            {name: 'Weekend day', value: ['sa', 'su']}\n        ];\n\n        $scope.months = [\n            {name: 'January', value: 1},\n            {name: 'February', value: 2},\n            {name: 'March', value: 3},\n            {name: 'April', value: 4},\n            {name: 'May', value: 5},\n            {name: 'June', value: 6},\n            {name: 'July', value: 7},\n            {name: 'August', value: 8},\n            {name: 'September', value: 9},\n            {name: 'October', value: 10},\n            {name: 'November', value: 11},\n            {name: 'December', value: 12}\n        ];\n        //endregion\n\n\n        // region default values\n\n        $scope.schedulerName = '';\n        $scope.weekDays = [];\n        $scope.schedulerStartHour = function (value) {\n            if (arguments.length) {\n                $scope.schedulerUTCTime = moment($scope.schedulerUTCTime).hours(value).toDate();\n            } else {\n                return $scope.schedulerUTCTime.getHours();\n            }\n        };\n        $scope.schedulerStartMinute = function (value) {\n            if (arguments.length) {\n                $scope.schedulerUTCTime = moment($scope.schedulerUTCTime).minutes(value).toDate();\n            } else {\n                return $scope.schedulerUTCTime.getMinutes();\n            }\n        };\n        $scope.schedulerStartSecond = function (value) {\n            if (arguments.length) {\n                $scope.schedulerUTCTime = moment($scope.schedulerUTCTime).seconds(value).toDate();\n            } else {\n                return $scope.schedulerUTCTime.getSeconds();\n            }\n        };\n        $scope.schedulerUTCTime = moment().toDate();\n        $scope.schedulerFrequency = $scope.frequencyOptions[0];\n        $scope.schedulerShowEvery = false;\n        $scope.schedulerEnd = $scope.endOptions[0];\n        $scope.schedulerInterval = 1;\n        $scope.schedulerOccurrenceCount = 1;\n        $scope.monthlyRepeatOption = 'day';\n        $scope.monthDay = 1;\n        $scope.monthlyOccurrence = $scope.occurrences[0];\n        $scope.monthlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyRepeatOption = 'month';\n        $scope.yearlyMonth = $scope.months[0];\n        $scope.yearlyMonthDay = 1;\n        $scope.yearlyWeekDay = $scope.weekdays[0];\n        $scope.yearlyOtherMonth = $scope.months[0];\n        $scope.yearlyOccurrence = $scope.occurrences[0];\n\n        //Detail view\n        $scope.schedulerIsValid = false;\n        $scope.rrule_nlp_description = '';\n        $scope.rrule = '';\n        $scope.dateChoice = 'utc';\n        $scope.occurrence_list = [];\n\n        //endregion\n\n\n        function CreateObject(scope, requireFutureST) {\n            var fn = function () {\n\n                this.scope = scope;\n                this.useTimezone = angular_ui_scheduler_useTimezone;\n                this.requireFutureStartTime = requireFutureST;\n\n                // Evaluate user intput and build options for passing to rrule\n                this.getOptions = function () {\n                    var options = {};\n                    options.startDate = this.scope.schedulerUTCTime;\n                    options.frequency = this.scope.schedulerFrequency.value;\n                    options.interval = this.scope.schedulerInterval;\n                    if (this.scope.schedulerEnd.value === 'after') {\n                        options.occurrenceCount = this.scope.schedulerOccurrenceCount;\n                    }\n                    if (this.scope.schedulerEnd.value === 'on') {\n                        options.endDate = moment(scope.schedulerUTCTime).add(1, 'd').toDate();\n                    }\n                    if (this.scope.schedulerFrequency.value === 'weekly') {\n                        options.weekDays = this.scope.weekDays;\n                    }\n                    else if (this.scope.schedulerFrequency.value === 'yearly') {\n                        if (this.scope.yearlyRepeatOption === 'month') {\n                            options.month = this.scope.yearlyMonth.value;\n                            options.monthDay = this.scope.yearlyMonthDay;\n                        }\n                        else {\n                            options.setOccurrence = this.scope.yearlyOccurrence.value;\n                            options.weekDays = this.scope.yearlyWeekDay.value;\n                            options.month = this.scope.yearlyOtherMonth.value;\n                        }\n                    }\n                    else if (this.scope.schedulerFrequency.value === 'monthly') {\n                        if (this.scope.monthlyRepeatOption === 'day') {\n                            options.monthDay = this.scope.monthDay;\n                        }\n                        else {\n                            options.setOccurrence = this.scope.monthlyOccurrence.value;\n                            options.weekDays = this.scope.monthlyWeekDay.value;\n                        }\n                    }\n                    return options;\n                };\n\n                // Clear custom field errors\n                this.clearErrors = function () {\n                    this.scope.scheduler_weekDays_error = false;\n                    this.scope.scheduler_endDt_error = false;\n                    this.scope.resetStartDate();\n                    this.scope.scheduler_endDt_error = false;\n                    this.scope.scheduler_interval_error = false;\n                    this.scope.scheduler_occurrenceCount_error = false;\n                    this.scope.scheduler_monthDay_error = false;\n                    this.scope.scheduler_yearlyMonthDay_error = false;\n                };\n\n                // Set values for detail page\n                this.setDetails = function () {\n                    //var rrule = this.getRRule(),\n                    //    scope = this.scope;\n                    //if (rrule) {\n                    //    scope.rrule_nlp_description = rrule.toText();\n                    //    scope.dateChoice = 'local';\n                    //    scope.occurrence_list = [];\n                    //    rrule.all(function (date, i) {\n                    //        var local, dt;\n                    //        if (i < 10) {\n                    //            if (angular_ui_scheduler_useTimezone) {\n                    //                dt = $timezones.align(date, scope.schedulerTimeZone);\n                    //                local = $filter('schZeroPad')(dt.getMonth() + 1, 2) + '/' +\n                    //                    $filter('schZeroPad')(dt.getDate(), 2) + '/' + dt.getFullYear() + ' ' +\n                    //                    $filter('schZeroPad')(dt.getHours(), 2) + ':' +\n                    //                    $filter('schZeroPad')(dt.getMinutes(), 2) + ':' +\n                    //                    $filter('schZeroPad')(dt.getSeconds(), 2) + ' ' +\n                    //                    dt.getTimezoneAbbreviation();\n                    //            }\n                    //            else {\n                    //                local = $filter('date')(date, 'MM/dd/yyyy HH:mm:ss Z');\n                    //            }\n                    //            scope.occurrence_list.push({utc: $filter('schDateStrFix')(date.toISOString()), local: local});\n                    //            return true;\n                    //        }\n                    //        return false;\n                    //    });\n                    //    scope.rrule_nlp_description = rrule.toText().replace(/^RRule error.*$/, 'Natural language description not available');\n                    //    scope.rrule = rrule.toString();\n                    //}\n                };\n\n                // Returns an rrule object\n                this.getRRule = function () {\n                    var options = this.getOptions();\n                    return GetRule(options);\n                };\n\n                // Return object containing schedule name, string representation of rrule per iCalendar RFC,\n                // and options used to create rrule\n                this.getValue = function () {\n                    var rule = this.getRRule(),\n                        options = this.getOptions();\n                    return {\n                        name: scope.schedulerName,\n                        rrule: rule.toString(),\n                        options: options\n                    };\n                };\n\n                this.setRRule = function (rule) {\n                    this.clear();\n                    return SetRule(rule, this.scope);\n                };\n\n                this.setName = function (name) {\n                    this.scope.schedulerName = name;\n                };\n\n                // Clear the form, returning all elements to a default state\n                this.clear = function () {\n                    this.clearErrors();\n                    if (this.scope.scheduler_form && this.scope.scheduler_form.schedulerName) {\n                        this.scope.scheduler_form.schedulerName.$setPristine();\n                    }\n                    this.scope.setDefaults();\n                };\n\n                // futureStartTime setter/getter\n                this.setRequireFutureStartTime = function (opt) {\n                    this.requireFutureStartTime = opt;\n                };\n\n                this.getRequireFutureStartTime = function () {\n                    return this.requireFutureStartTime;\n                };\n\n                this.setShowRRule = function (opt) {\n                    scope.showRRule = opt;\n                };\n            };\n            return new fn();\n        }\n\n        function Init(params) {\n\n            var scope = params.scope,\n                requireFutureStartTime = params.requireFutureStartTime || false;\n\n            scope.schedulerShowTimeZone = angular_ui_scheduler_useTimezone;\n\n            scope.setDefaults = function () {\n                //if (angular_ui_scheduler_useTimezone) {\n                //    scope.current_timezone = `.getLocal();\n                //    if ($.isEmptyObject(scope.current_timezone) || !scope.current_timezone.name) {\n                //        $log.error('Failed to find local timezone. Defaulting to America/New_York.');\n                //        scope.current_timezone = {name: 'America/New_York'};\n                //    }\n                //    // Set the <select> to the browser's local timezone\n                //    scope.schedulerTimeZone = _.find(scope.timeZones, function (x) {\n                //        return x.name === scope.current_timezone.name;\n                //    });\n                //}\n                //LoadLookupValues(scope);\n                //SetDefaults(scope);\n                scope.scheduleTimeChange();\n                scope.scheduleRepeatChange();\n            };\n\n            scope.scheduleTimeChange = function () {\n                if (angular_ui_scheduler_useTimezone) {\n                    scope.resetStartDate();\n                    try {\n\n                        //todo check\n                        scope.schedulerUTCTime = moment(scope.schedulerUTCTime).tz(scope.schedulerTimeZone);\n\n                        scope.scheduler_form_schedulerStartDt_error = false;\n                        scope.scheduler_startTime_error = false;\n                    }\n                    catch (e) {\n                        scope.startDateError('Provide a valid start date and time');\n                    }\n                }\n                else {\n                    scope.scheduler_startTime_error = false;\n                    scope.scheduler_form_schedulerStartDt_error = false;\n                }\n            };\n\n            scope.resetError = function (variable) {\n                scope[variable] = false;\n            };\n\n            scope.scheduleRepeatChange = function () {\n                if (scope.schedulerFrequency && scope.schedulerFrequency.value !== '' && scope.schedulerFrequency.value !== 'none') {\n                    scope.schedulerInterval = 1;\n                    scope.schedulerShowInterval = true;\n                    scope.schedulerIntervalLabel = scope.schedulerFrequency.intervalLabel;\n                }\n                else {\n                    scope.schedulerShowInterval = false;\n                    scope.schedulerEnd = scope.endOptions[0];\n                }\n                scope.sheduler_frequency_error = false;\n            };\n\n            scope.setWeekday = function (event, day) {\n                // Add or remove day when user clicks checkbox button\n                var i = scope.weekDays.indexOf(day);\n                if (i >= 0) {\n                    scope.weekDays.splice(i, 1);\n                }\n                else {\n                    scope.weekDays.push(day);\n                }\n                $(event.target).blur();\n                scope.scheduler_weekDays_error = false;\n            };\n\n            scope.startDateError = function (msg) {\n                scope.scheduler_form_schedulerStartDt_error = msg;\n            };\n\n            scope.resetStartDate = function () {\n                scope.scheduler_form_schedulerStartDt_error = '';\n            };\n\n            scope.schedulerEndChange = function () {\n                scope.schedulerOccurrenceCount = 1;\n            };\n\n            if (angular_ui_scheduler_useTimezone) {\n                scope.timeZones = moment.tz.names();\n            }\n            scope.setDefaults();\n\n            return CreateObject(scope, requireFutureStartTime);\n\n        }\n\n        $scope.scheduler = Init({scope: $scope, requireFutureStartTime: false});\n    }]);\n","/**\n * @ngdoc directive\n * @name angular-ui-scheduler:angularUiScheduler\n *\n * @description\n *\n *\n * @restrict E\n * */\nangular.module('angular-ui-scheduler')\n    .directive('angularUiScheduler', function () {\n        return {\n            restrict: 'E',\n            templateUrl: 'angular-ui-scheduler/src/angularUiScheduler.html',\n            controller: 'angularUiSchedulerCtrl',\n            link: function (scope, elem, attr) {\n\n            }\n        };\n});\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schDateStrFixFilter\n *\n * @description\n\n * $filter('schDateStrFix')(s)  where s is a date string in ISO format: yyyy-mm-ddTHH:MM:SS.sssZ. Returns string in format: mm/dd/yyyy HH:MM:SS UTC\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schDateStrFix', function () {\n        return function (dateStr) {\n            return dateStr.replace(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*Z/, function (match, yy, mm, dd, hh, mi, ss) {\n                return mm + '/' + dd + '/' + yy + ' ' + hh + ':' + mi + ':' + ss + ' UTC';\n            });\n        };\n    });\n\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:schZeroPadFilter\n *\n * @description\n * $filter('schZeroPad')(n, pad) -- or -- {{ n | afZeroPad:pad }}\n *\n * */\nangular.module('angular-ui-scheduler')\n    .filter('schZeroPad', function () {\n        return function (n, pad) {\n            var str = (Math.pow(10, pad) + '').replace(/^1/, '') + (n + '').trim();\n            return str.substr(str.length - pad);\n        };\n    });","/**\n * @ngdoc service\n * @name angular-ui-scheduler:GetRule\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('GetRule',  [\"$log\", function ($log) {\n        return function (params) {\n            // Convert user inputs to an rrule. Returns rrule object using https://github.com/jkbr/rrule\n            // **list of 'valid values' found below in LoadLookupValues\n\n            var startDate = params.startDate,  // date object or string in yyyy-MM-ddTHH:mm:ss.sssZ format\n                frequency = params.frequency,  // string, optional, valid value from frequencyOptions\n                interval = params.interval,    // integer, optional\n                occurrenceCount = params.occurrenceCount,  //integer, optional\n                endDate = params.endDate,      // date object or string in yyyy-MM-dd format, optional\n                                               // ignored if occurrenceCount provided\n                month = params.month,          // integer, optional, valid value from months\n                monthDay = params.monthDay,    // integer, optional, between 1 and 31\n                weekDays = params.weekDays,     // integer, optional, valid value from weekdays\n                setOccurrence = params.setOccurrence, // integer, optional, valid value from occurrences\n                options = {}, i;\n\n            if (angular.isDate(startDate)) {\n                options.dtstart = startDate;\n            }\n            else {\n                try {\n                    options.dtstart = new Date(startDate);\n                }\n                catch (e) {\n                    $log.error('Date conversion failed. Attempted to convert ' + startDate + ' to Date. ' + e.message);\n                }\n            }\n\n            if (frequency && frequency !== 'none') {\n                options.freq = RRule[frequency.toUpperCase()];\n                options.interval = interval;\n\n                if (weekDays && typeof weekDays === 'string') {\n                    options.byweekday = RRule[weekDays.toUpperCase()];\n                }\n\n                if (weekDays && angular.isArray(weekDays)) {\n                    options.byweekday = [];\n                    for (i = 0; i < weekDays.length; i++) {\n                        options.byweekday.push(RRule[weekDays[i].toUpperCase()]);\n                    }\n                }\n\n                if (setOccurrence !== undefined && setOccurrence !== null) {\n                    options.bysetpos = setOccurrence;\n                }\n\n                if (month) {\n                    options.bymonth = month;\n                }\n\n                if (monthDay) {\n                    options.bymonthday = monthDay;\n                }\n\n                if (occurrenceCount) {\n                    options.count = occurrenceCount;\n                }\n                else if (endDate) {\n                    if (angular.isDate(endDate)) {\n                        options.until = endDate;\n                    }\n                    else {\n                        try {\n                            options.until = new Date(endDate);\n                        }\n                        catch (e) {\n                            $log.error('Date conversion failed. Attempted to convert ' + endDate + ' to Date. ' + e.message);\n                        }\n                    }\n                }\n            }\n            else {\n                // We only want to run 1x\n                options.freq = RRule.DAILY;\n                options.interval = 1;\n                options.count = 1;\n            }\n            return new RRule(options);\n        };\n    }]);","/**\n * @ngdoc service\n * @name angular-ui-scheduler:InRangeFactory\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('InRange', function () {\n        return function (x, min, max, length) {\n            var rx = new RegExp('\\\\d{1,' + length + '}');\n            if (!rx.test(x)) {\n                return false;\n            }\n            if (x < min || x > max) {\n                return false;\n            }\n            return true;\n        };\n    });\n","/**\n * @ngdoc service\n * @name angular-ui-scheduler:SetRule\n *\n * @description\n *\n *\n * */\nangular.module('angular-ui-scheduler')\n    .factory('SetRule', [\"useTimezone\", \"$log\", \"$filter\", function (useTimezone, $log, $filter) {\n        return function (rule, scope) {\n            var set, result = '', i,\n                setStartDate = false;\n\n            // Search the set of RRule keys for a particular key, returning its value\n            function getValue(set, key) {\n                var pair = _.find(set, function (x) {\n                    var k = x.split(/=/)[0].toUpperCase();\n                    return (k === key);\n                });\n                if (pair) {\n                    return pair.split(/=/)[1].toUpperCase();\n                }\n                return null;\n            }\n\n            function toWeekDays(days) {\n                var darray = days.toLowerCase().split(/,/),\n                    match = _.find(scope.weekdays, function (x) {\n                        var warray = (angular.isArray(x.value)) ? x.value : [x.value],\n                            diffA = _.difference(warray, darray),\n                            diffB = _.difference(darray, warray);\n                        return (diffA.length === 0 && diffB.length === 0);\n                    });\n                return match;\n            }\n\n            function setValue(pair, set) {\n                var key = pair.split(/=/)[0].toUpperCase(),\n                    value = pair.split(/=/)[1],\n                    days, l, j, dt, month, day, timeString;\n\n                if (key === 'NAME') {\n                    //name is not actually part of RRule, but we can handle it just the same\n                    scope.schedulerName = value;\n                }\n\n                if (key === 'FREQ') {\n                    l = value.toLowerCase();\n                    scope.schedulerFrequency = _.find(scope.frequencyOptions, function (opt) {\n                        scope.schedulerIntervalLabel = opt.intervalLabel;\n                        return opt.value === l;\n                    });\n                    if (!scope.schedulerFrequency || !scope.schedulerFrequency.name) {\n                        result = 'FREQ not found in list of valid options';\n                    }\n                }\n                if (key === 'INTERVAL') {\n                    if (parseInt(value, 10)) {\n                        scope.schedulerInterval = parseInt(value, 10);\n                        scope.schedulerShowInterval = true;\n                    }\n                    else {\n                        result = 'INTERVAL must contain an integer > 0';\n                    }\n                }\n                if (key === 'BYDAY') {\n                    if (getValue(set, 'FREQ') === 'WEEKLY') {\n                        days = value.split(/,/);\n                        scope.weekDays = [];\n                        for (j = 0; j < days.length; j++) {\n                            if (_.contains(['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'], days[j])) {\n                                scope.weekDays.push(days[j].toLowerCase());\n                                scope['weekDay' + days[j].toUpperCase() + 'Class'] = 'active'; //activate related button\n                            }\n                            else {\n                                result = 'BYDAY contains unrecognized day value(s)';\n                            }\n                        }\n                    }\n                    else if (getValue(set, 'FREQ') === 'MONTHLY') {\n                        scope.monthlyRepeatOption = 'other';\n                        scope.monthlyWeekDay = toWeekDays(value);\n                        if (!scope.monthlyWeekDay) {\n                            result = 'BYDAY contains unrecognized day value(s)';\n                        }\n                    }\n                    else {\n                        scope.yearlyRepeatOption = 'other';\n                        scope.yearlyWeekDay = toWeekDays(value);\n                        if (!scope.yearlyWeekDay) {\n                            result = 'BYDAY contains unrecognized day value(s)';\n                        }\n                    }\n                }\n                if (key === 'BYMONTHDAY') {\n                    if (parseInt(value, 10) && parseInt(value, 10) > 0 && parseInt(value, 10) < 32) {\n                        scope.monthDay = parseInt(value, 10);\n                        scope.monhthlyRepeatOption = 'day';\n                    }\n                    else {\n                        result = 'BYMONTHDAY must contain an integer between 1 and 31';\n                    }\n                }\n                if (key === 'DTSTART') {\n                    // The form has been reset to the local zone\n                    setStartDate = true;\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    if (useTimezone) {\n                        dt = new Date(value); // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2);\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                        scope.schedulerStartDt = month + '/' + day + '/' + dt.getFullYear();\n                        scope.schedulerStartHour = $filter('schZeroPad')(dt.getHours(), 2);\n                        scope.schedulerStartMinute = $filter('schZeroPad')(dt.getMinutes(), 2);\n                        scope.schedulerStartSecond = $filter('schZeroPad')(dt.getSeconds(), 2);\n                        scope.scheduleTimeChange();  // calc UTC\n                    }\n                    else {\n                        // expects inbound dates to be in ISO format: 2014-04-02T00:00:00.000Z\n                        scope.schedulerStartDt = value.replace(/T.*$/, '').replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1, p2, p3) {\n                            return p2 + '/' + p3 + '/' + p1;\n                        });\n                        timeString = value.replace(/^.*T/, '');\n                        scope.schedulerStartHour = $filter('schZeroPad')(timeString.substr(0, 2), 2);\n                        scope.schedulerStartMinute = $filter('schZeroPad')(timeString.substr(3, 2), 2);\n                        scope.schedulerStartSecond = $filter('schZeroPad')(timeString.substr(6, 2), 2);\n                    }\n                    scope.scheduleTimeChange();\n                }\n                if (key === 'BYSETPOS') {\n                    if (getValue(set, 'FREQ') === 'YEARLY') {\n                        scope.yearlRepeatOption = 'other';\n                        scope.yearlyOccurrence = _.find(scope.occurrences, function (x) {\n                            return (x.value === parseInt(value, 10));\n                        });\n                        if (!scope.yearlyOccurrence || !scope.yearlyOccurrence.name) {\n                            result = 'BYSETPOS was not in the set of 1,2,3,4,-1';\n                        }\n                    }\n                    else {\n                        scope.monthlyOccurrence = _.find(scope.occurrences, function (x) {\n                            return (x.value === parseInt(value, 10));\n                        });\n                        if (!scope.monthlyOccurrence || !scope.monthlyOccurrence.name) {\n                            result = 'BYSETPOS was not in the set of 1,2,3,4,-1';\n                        }\n                    }\n                }\n\n                if (key === 'COUNT') {\n                    if (parseInt(value, 10)) {\n                        scope.schedulerEnd = scope.endOptions[1];\n                        scope.schedulerOccurrenceCount = parseInt(value, 10);\n                    }\n                    else {\n                        result = 'COUNT must be a valid integer > 0';\n                    }\n                }\n\n                if (key === 'UNTIL') {\n                    if (/\\d{8}T\\d{6}.*Z/.test(value)) {\n                        // date may come in without separators. add them so new Date constructor will work\n                        value = value.replace(/(\\d{4})(\\d{2})(\\d{2}T)(\\d{2})(\\d{2})(\\d{2}.*$)/,\n                            function (match, p1, p2, p3, p4, p5, p6) {\n                                return p1 + '-' + p2 + '-' + p3 + p4 + ':' + p5 + ':' + p6.substr(0, 2) + 'Z';\n                            });\n                    }\n                    scope.schedulerEnd = scope.endOptions[2];\n                    if (useTimezone) {\n                        dt = new Date(value); // date adjusted to local zone automatically\n                        month = $filter('schZeroPad')(dt.getMonth() + 1, 2);\n                        day = $filter('schZeroPad')(dt.getDate(), 2);\n                        scope.schedulerEndDt = month + '/' + day + '/' + dt.getFullYear();\n                    }\n                    else {\n                        scope.schedulerEndDt = value.replace(/T.*$/, '').replace(/(\\d{4})-(\\d{2})-(\\d{2})/, function (match, p1, p2, p3) {\n                            return p2 + '/' + p3 + '/' + p1;\n                        });\n                    }\n                }\n\n                if (key === 'BYMONTH') {\n                    if (getValue(set, 'FREQ') === 'YEARLY' && getValue(set, 'BYDAY')) {\n                        scope.yearlRepeatOption = 'other';\n                        scope.yearlyOtherMonth = _.find(scope.months, function (x) {\n                            return x.value === parseInt(value, 10);\n                        });\n                        if (!scope.yearlyOtherMonth || !scope.yearlyOtherMonth.name) {\n                            result = 'BYMONTH must be an integer between 1 and 12';\n                        }\n                    }\n                    else {\n                        scope.yearlyOption = 'month';\n                        scope.yearlyMonth = _.find(scope.months, function (x) {\n                            return x.value === parseInt(value, 10);\n                        });\n                        if (!scope.yearlyMonth || !scope.yearlyMonth.name) {\n                            result = 'BYMONTH must be an integer between 1 and 12';\n                        }\n                    }\n                }\n\n                if (key === 'BYMONTHDAY') {\n                    if (parseInt(value, 10)) {\n                        scope.yearlyMonthDay = parseInt(value, 10);\n                    }\n                    else {\n                        result = 'BYMONTHDAY must be an integer between 1 and 31';\n                    }\n                }\n            }\n\n            function isValid() {\n                // Check what was put into scope vars, and see if anything is\n                // missing or not quite right.\n                if (scope.schedulerFrequency.name === 'weekly' && scope.weekDays.length === 0) {\n                    result = 'Frequency is weekly, but BYDAYS value is missing.';\n                }\n                if (!setStartDate) {\n                    result = 'Warning: start date was not provided';\n                }\n            }\n\n            if (rule) {\n                set = rule.split(/;/);\n                if (angular.isArray(set)) {\n                    for (i = 0; i < set.length; i++) {\n                        setValue(set[i], set);\n                        if (result) {\n                            break;\n                        }\n                    }\n                    if (!result) {\n                        isValid();\n                    }\n                }\n                else {\n                    result = 'No rule entered. Provide a valid RRule string.';\n                }\n            }\n            else {\n                result = 'No rule entered. Provide a valid RRule string.';\n            }\n            if (result) {\n                $log.error(result);\n            }\n            return result;\n        };\n    }]);"],"sourceRoot":"/source/"}